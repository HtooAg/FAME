"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/me/route";
exports.ids = ["app/api/auth/me/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "@google-cloud/storage":
/*!****************************************!*\
  !*** external "@google-cloud/storage" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google-cloud/storage");;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fme%2Froute&page=%2Fapi%2Fauth%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5COneDrive%5CDesktop%5CFAME%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5COneDrive%5CDesktop%5CFAME&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fme%2Froute&page=%2Fapi%2Fauth%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5COneDrive%5CDesktop%5CFAME%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5COneDrive%5CDesktop%5CFAME&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_ASUS_OneDrive_Desktop_FAME_app_api_auth_me_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/auth/me/route.ts */ \"(rsc)/./app/api/auth/me/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([C_Users_ASUS_OneDrive_Desktop_FAME_app_api_auth_me_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\nC_Users_ASUS_OneDrive_Desktop_FAME_app_api_auth_me_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/me/route\",\n        pathname: \"/api/auth/me\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/me/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Desktop\\\\FAME\\\\app\\\\api\\\\auth\\\\me\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ASUS_OneDrive_Desktop_FAME_app_api_auth_me_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/auth/me/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGbWUlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmF1dGglMkZtZSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmF1dGglMkZtZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDT25lRHJpdmUlNUNEZXNrdG9wJTVDRkFNRSU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDQVNVUyU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q0ZBTUUmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNzQjtBQUNuRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzA3NjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcQVNVU1xcXFxPbmVEcml2ZVxcXFxEZXNrdG9wXFxcXEZBTUVcXFxcYXBwXFxcXGFwaVxcXFxhdXRoXFxcXG1lXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXV0aC9tZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2F1dGgvbWVcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2F1dGgvbWUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxBU1VTXFxcXE9uZURyaXZlXFxcXERlc2t0b3BcXFxcRkFNRVxcXFxhcHBcXFxcYXBpXFxcXGF1dGhcXFxcbWVcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2F1dGgvbWUvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fme%2Froute&page=%2Fapi%2Fauth%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5COneDrive%5CDesktop%5CFAME%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5COneDrive%5CDesktop%5CFAME&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/auth/me/route.ts":
/*!**********************************!*\
  !*** ./app/api/auth/me/route.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_gcs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/gcs */ \"(rsc)/./lib/gcs.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_gcs__WEBPACK_IMPORTED_MODULE_2__]);\n_lib_gcs__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev-secret-do-not-use-in-prod\";\n// Force dynamic rendering since this route uses request.cookies\nconst dynamic = \"force-dynamic\";\nasync function GET(request) {\n    try {\n        const token = request.cookies.get(\"auth-token\")?.value;\n        if (!token) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"No token\"\n        }, {\n            status: 401\n        });\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        // First check users index (for approved users)\n        const users = await (0,_lib_gcs__WEBPACK_IMPORTED_MODULE_2__.readJsonFile)(_lib_gcs__WEBPACK_IMPORTED_MODULE_2__.paths.usersIndex, []);\n        let user = users.find((u)=>u.id === decoded.userId);\n        console.log(\"User lookup result:\", {\n            userId: decoded.userId,\n            found: !!user\n        }); // Debug log\n        // Special handling for super admin\n        if (decoded.role === \"super_admin\") {\n            const adminUser = users.find((u)=>u.role === \"super_admin\" && u.id === decoded.userId);\n            if (adminUser) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    id: adminUser.id,\n                    email: adminUser.email,\n                    name: adminUser.name,\n                    role: \"super_admin\",\n                    accountStatus: \"active\",\n                    subscriptionStatus: \"active\"\n                });\n            }\n        }\n        // If not found in users index, check registrations (for pending users)\n        if (!user) {\n            const registrations = await (0,_lib_gcs__WEBPACK_IMPORTED_MODULE_2__.readJsonDirectory)(_lib_gcs__WEBPACK_IMPORTED_MODULE_2__.paths.registrationStageManagerDir);\n            user = registrations.find((r)=>r.id === decoded.userId);\n            console.log(\"Registration lookup result:\", {\n                userId: decoded.userId,\n                found: !!user\n            }); // Debug log\n        }\n        if (!user) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"User not found\"\n        }, {\n            status: 404\n        });\n        // Check account status (super_admin bypasses most checks)\n        if (user.role !== \"super_admin\") {\n            if (user.accountStatus === \"suspended\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Account suspended\",\n                    accountStatus: \"suspended\"\n                }, {\n                    status: 403\n                });\n            }\n            if (user.accountStatus === \"deactivated\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Account deactivated\",\n                    accountStatus: \"deactivated\"\n                }, {\n                    status: 403\n                });\n            }\n            if (user.accountStatus === \"rejected\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Account rejected\",\n                    accountStatus: \"rejected\"\n                }, {\n                    status: 403\n                });\n            }\n            // Allow pending users to get their data but they'll be redirected appropriately\n            if (user.accountStatus === \"pending\") {\n            // Return user data but the frontend will handle redirection\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            eventId: user.eventId,\n            accountStatus: user.accountStatus,\n            subscriptionStatus: user.subscriptionStatus,\n            subscriptionEndDate: user.subscriptionEndDate\n        });\n    } catch (error) {\n        console.error(\"Me error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Invalid token\"\n        }, {\n            status: 401\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/me/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/build-context.ts":
/*!******************************!*\
  !*** ./lib/build-context.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuildContext: () => (/* binding */ BuildContext)\n/* harmony export */ });\n/**\r\n * Build context detection utility\r\n * Helps determine if code is running during build time vs runtime\r\n */ class BuildContext {\n    static{\n        this._isBuilding = null;\n    }\n    /**\r\n\t * Detect if we're currently in a build context\r\n\t */ static isBuilding() {\n        if (this._isBuilding !== null) {\n            return this._isBuilding;\n        }\n        // Check for explicit build environment variable\n        if (false) {}\n        // Check process arguments for build command\n        const processArgs = process.argv.join(\" \");\n        const isBuildCommand = processArgs.includes(\"next build\") || processArgs.includes(\"npm run build\") || processArgs.includes(\"yarn build\");\n        // Check various build-time indicators\n        const buildIndicators = [\n            // Next.js build phases\n            process.env.NEXT_PHASE === \"phase-production-build\",\n            process.env.NEXT_PHASE === \"phase-production-server\",\n            // Build-specific environment variables\n            process.env.BUILDING === \"true\",\n            // Check if we're in static generation\n            process.env.__NEXT_PRIVATE_PREBUNDLED_REACT === \"next\",\n            // Process arguments check\n            isBuildCommand\n        ];\n        // Check if we're in a build context by examining the call stack\n        const stack = new Error().stack || \"\";\n        const buildStackIndicators = [\n            \"next/dist/build\",\n            \"next/dist/server/lib/router-server\",\n            \"getStaticProps\",\n            \"getServerSideProps\",\n            \"generateStaticParams\",\n            \"static-generation\"\n        ];\n        const hasStackIndicator = buildStackIndicators.some((indicator)=>stack.includes(indicator));\n        this._isBuilding = buildIndicators.some(Boolean) || hasStackIndicator;\n        return this._isBuilding;\n    }\n    /**\r\n\t * Check if we're in runtime (not building)\r\n\t */ static isRuntime() {\n        return !this.isBuilding();\n    }\n    /**\r\n\t * Force set build context (for testing)\r\n\t */ static setBuildContext(isBuilding) {\n        this._isBuilding = isBuilding;\n    }\n    /**\r\n\t * Reset build context detection\r\n\t */ static reset() {\n        this._isBuilding = null;\n    }\n    /**\r\n\t * Get environment info for debugging\r\n\t */ static getEnvironmentInfo() {\n        return {\n            NODE_ENV: \"development\",\n            NEXT_PHASE: process.env.NEXT_PHASE,\n            BUILDING: process.env.BUILDING,\n            NEXT_BUILD_SKIP_WEBSOCKET: \"false\",\n            VERCEL: process.env.VERCEL,\n            hasWindow: \"undefined\" !== \"undefined\",\n            hasRequestContext: typeof globalThis !== \"undefined\" && globalThis.__NEXT_REQUEST_CONTEXT__,\n            processArgs: process.argv.join(\" \"),\n            isBuilding: this.isBuilding(),\n            isRuntime: this.isRuntime()\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYnVpbGQtY29udGV4dC50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBRU0sTUFBTUE7O2FBQ0dDLGNBQThCOztJQUU3Qzs7RUFFQyxHQUNELE9BQU9DLGFBQXNCO1FBQzVCLElBQUksSUFBSSxDQUFDRCxXQUFXLEtBQUssTUFBTTtZQUM5QixPQUFPLElBQUksQ0FBQ0EsV0FBVztRQUN4QjtRQUVBLGdEQUFnRDtRQUNoRCxJQUFJRSxLQUFnRCxFQUFFLEVBR3JEO1FBRUQsNENBQTRDO1FBQzVDLE1BQU1HLGNBQWNILFFBQVFJLElBQUksQ0FBQ0MsSUFBSSxDQUFDO1FBQ3RDLE1BQU1DLGlCQUNMSCxZQUFZSSxRQUFRLENBQUMsaUJBQ3JCSixZQUFZSSxRQUFRLENBQUMsb0JBQ3JCSixZQUFZSSxRQUFRLENBQUM7UUFFdEIsc0NBQXNDO1FBQ3RDLE1BQU1DLGtCQUFrQjtZQUN2Qix1QkFBdUI7WUFDdkJSLFFBQVFDLEdBQUcsQ0FBQ1EsVUFBVSxLQUFLO1lBQzNCVCxRQUFRQyxHQUFHLENBQUNRLFVBQVUsS0FBSztZQUMzQix1Q0FBdUM7WUFDdkNULFFBQVFDLEdBQUcsQ0FBQ1MsUUFBUSxLQUFLO1lBQ3pCLHNDQUFzQztZQUN0Q1YsUUFBUUMsR0FBRyxDQUFDVSwrQkFBK0IsS0FBSztZQUNoRCwwQkFBMEI7WUFDMUJMO1NBQ0E7UUFFRCxnRUFBZ0U7UUFDaEUsTUFBTU0sUUFBUSxJQUFJQyxRQUFRRCxLQUFLLElBQUk7UUFDbkMsTUFBTUUsdUJBQXVCO1lBQzVCO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtTQUNBO1FBRUQsTUFBTUMsb0JBQW9CRCxxQkFBcUJFLElBQUksQ0FBQyxDQUFDQyxZQUNwREwsTUFBTUwsUUFBUSxDQUFDVTtRQUdoQixJQUFJLENBQUNuQixXQUFXLEdBQUdVLGdCQUFnQlEsSUFBSSxDQUFDRSxZQUFZSDtRQUVwRCxPQUFPLElBQUksQ0FBQ2pCLFdBQVc7SUFDeEI7SUFFQTs7RUFFQyxHQUNELE9BQU9xQixZQUFxQjtRQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDcEIsVUFBVTtJQUN4QjtJQUVBOztFQUVDLEdBQ0QsT0FBT3FCLGdCQUFnQnJCLFVBQW1CLEVBQVE7UUFDakQsSUFBSSxDQUFDRCxXQUFXLEdBQUdDO0lBQ3BCO0lBRUE7O0VBRUMsR0FDRCxPQUFPc0IsUUFBYztRQUNwQixJQUFJLENBQUN2QixXQUFXLEdBQUc7SUFDcEI7SUFFQTs7RUFFQyxHQUNELE9BQU93QixxQkFBMEM7UUFDaEQsT0FBTztZQUNOQyxVQXhGSDtZQXlGR2QsWUFBWVQsUUFBUUMsR0FBRyxDQUFDUSxVQUFVO1lBQ2xDQyxVQUFVVixRQUFRQyxHQUFHLENBQUNTLFFBQVE7WUFDOUJSLDJCQUEyQkYsT0FBcUM7WUFDaEV3QixRQUFReEIsUUFBUUMsR0FBRyxDQUFDdUIsTUFBTTtZQUMxQkMsV0FBVyxnQkFBa0I7WUFDN0JDLG1CQUNDLE9BQU9DLGVBQWUsZUFDdEIsV0FBb0JDLHdCQUF3QjtZQUM3Q3pCLGFBQWFILFFBQVFJLElBQUksQ0FBQ0MsSUFBSSxDQUFDO1lBQy9CTixZQUFZLElBQUksQ0FBQ0EsVUFBVTtZQUMzQm9CLFdBQVcsSUFBSSxDQUFDQSxTQUFTO1FBQzFCO0lBQ0Q7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9saWIvYnVpbGQtY29udGV4dC50cz9mYTlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBCdWlsZCBjb250ZXh0IGRldGVjdGlvbiB1dGlsaXR5XHJcbiAqIEhlbHBzIGRldGVybWluZSBpZiBjb2RlIGlzIHJ1bm5pbmcgZHVyaW5nIGJ1aWxkIHRpbWUgdnMgcnVudGltZVxyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBCdWlsZENvbnRleHQge1xyXG5cdHByaXZhdGUgc3RhdGljIF9pc0J1aWxkaW5nOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XHJcblxyXG5cdC8qKlxyXG5cdCAqIERldGVjdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBidWlsZCBjb250ZXh0XHJcblx0ICovXHJcblx0c3RhdGljIGlzQnVpbGRpbmcoKTogYm9vbGVhbiB7XHJcblx0XHRpZiAodGhpcy5faXNCdWlsZGluZyAhPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5faXNCdWlsZGluZztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDaGVjayBmb3IgZXhwbGljaXQgYnVpbGQgZW52aXJvbm1lbnQgdmFyaWFibGVcclxuXHRcdGlmIChwcm9jZXNzLmVudi5ORVhUX0JVSUxEX1NLSVBfV0VCU09DS0VUID09PSBcInRydWVcIikge1xyXG5cdFx0XHR0aGlzLl9pc0J1aWxkaW5nID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgcHJvY2VzcyBhcmd1bWVudHMgZm9yIGJ1aWxkIGNvbW1hbmRcclxuXHRcdGNvbnN0IHByb2Nlc3NBcmdzID0gcHJvY2Vzcy5hcmd2LmpvaW4oXCIgXCIpO1xyXG5cdFx0Y29uc3QgaXNCdWlsZENvbW1hbmQgPVxyXG5cdFx0XHRwcm9jZXNzQXJncy5pbmNsdWRlcyhcIm5leHQgYnVpbGRcIikgfHxcclxuXHRcdFx0cHJvY2Vzc0FyZ3MuaW5jbHVkZXMoXCJucG0gcnVuIGJ1aWxkXCIpIHx8XHJcblx0XHRcdHByb2Nlc3NBcmdzLmluY2x1ZGVzKFwieWFybiBidWlsZFwiKTtcclxuXHJcblx0XHQvLyBDaGVjayB2YXJpb3VzIGJ1aWxkLXRpbWUgaW5kaWNhdG9yc1xyXG5cdFx0Y29uc3QgYnVpbGRJbmRpY2F0b3JzID0gW1xyXG5cdFx0XHQvLyBOZXh0LmpzIGJ1aWxkIHBoYXNlc1xyXG5cdFx0XHRwcm9jZXNzLmVudi5ORVhUX1BIQVNFID09PSBcInBoYXNlLXByb2R1Y3Rpb24tYnVpbGRcIixcclxuXHRcdFx0cHJvY2Vzcy5lbnYuTkVYVF9QSEFTRSA9PT0gXCJwaGFzZS1wcm9kdWN0aW9uLXNlcnZlclwiLFxyXG5cdFx0XHQvLyBCdWlsZC1zcGVjaWZpYyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxuXHRcdFx0cHJvY2Vzcy5lbnYuQlVJTERJTkcgPT09IFwidHJ1ZVwiLFxyXG5cdFx0XHQvLyBDaGVjayBpZiB3ZSdyZSBpbiBzdGF0aWMgZ2VuZXJhdGlvblxyXG5cdFx0XHRwcm9jZXNzLmVudi5fX05FWFRfUFJJVkFURV9QUkVCVU5ETEVEX1JFQUNUID09PSBcIm5leHRcIixcclxuXHRcdFx0Ly8gUHJvY2VzcyBhcmd1bWVudHMgY2hlY2tcclxuXHRcdFx0aXNCdWlsZENvbW1hbmQsXHJcblx0XHRdO1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIGluIGEgYnVpbGQgY29udGV4dCBieSBleGFtaW5pbmcgdGhlIGNhbGwgc3RhY2tcclxuXHRcdGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2sgfHwgXCJcIjtcclxuXHRcdGNvbnN0IGJ1aWxkU3RhY2tJbmRpY2F0b3JzID0gW1xyXG5cdFx0XHRcIm5leHQvZGlzdC9idWlsZFwiLFxyXG5cdFx0XHRcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3JvdXRlci1zZXJ2ZXJcIixcclxuXHRcdFx0XCJnZXRTdGF0aWNQcm9wc1wiLFxyXG5cdFx0XHRcImdldFNlcnZlclNpZGVQcm9wc1wiLFxyXG5cdFx0XHRcImdlbmVyYXRlU3RhdGljUGFyYW1zXCIsXHJcblx0XHRcdFwic3RhdGljLWdlbmVyYXRpb25cIixcclxuXHRcdF07XHJcblxyXG5cdFx0Y29uc3QgaGFzU3RhY2tJbmRpY2F0b3IgPSBidWlsZFN0YWNrSW5kaWNhdG9ycy5zb21lKChpbmRpY2F0b3IpID0+XHJcblx0XHRcdHN0YWNrLmluY2x1ZGVzKGluZGljYXRvcilcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy5faXNCdWlsZGluZyA9IGJ1aWxkSW5kaWNhdG9ycy5zb21lKEJvb2xlYW4pIHx8IGhhc1N0YWNrSW5kaWNhdG9yO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9pc0J1aWxkaW5nO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2hlY2sgaWYgd2UncmUgaW4gcnVudGltZSAobm90IGJ1aWxkaW5nKVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBpc1J1bnRpbWUoKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gIXRoaXMuaXNCdWlsZGluZygpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRm9yY2Ugc2V0IGJ1aWxkIGNvbnRleHQgKGZvciB0ZXN0aW5nKVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBzZXRCdWlsZENvbnRleHQoaXNCdWlsZGluZzogYm9vbGVhbik6IHZvaWQge1xyXG5cdFx0dGhpcy5faXNCdWlsZGluZyA9IGlzQnVpbGRpbmc7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZXNldCBidWlsZCBjb250ZXh0IGRldGVjdGlvblxyXG5cdCAqL1xyXG5cdHN0YXRpYyByZXNldCgpOiB2b2lkIHtcclxuXHRcdHRoaXMuX2lzQnVpbGRpbmcgPSBudWxsO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IGVudmlyb25tZW50IGluZm8gZm9yIGRlYnVnZ2luZ1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRFbnZpcm9ubWVudEluZm8oKTogUmVjb3JkPHN0cmluZywgYW55PiB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHROT0RFX0VOVjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYsXHJcblx0XHRcdE5FWFRfUEhBU0U6IHByb2Nlc3MuZW52Lk5FWFRfUEhBU0UsXHJcblx0XHRcdEJVSUxESU5HOiBwcm9jZXNzLmVudi5CVUlMRElORyxcclxuXHRcdFx0TkVYVF9CVUlMRF9TS0lQX1dFQlNPQ0tFVDogcHJvY2Vzcy5lbnYuTkVYVF9CVUlMRF9TS0lQX1dFQlNPQ0tFVCxcclxuXHRcdFx0VkVSQ0VMOiBwcm9jZXNzLmVudi5WRVJDRUwsXHJcblx0XHRcdGhhc1dpbmRvdzogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIixcclxuXHRcdFx0aGFzUmVxdWVzdENvbnRleHQ6XHJcblx0XHRcdFx0dHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuXHRcdFx0XHQoZ2xvYmFsVGhpcyBhcyBhbnkpLl9fTkVYVF9SRVFVRVNUX0NPTlRFWFRfXyxcclxuXHRcdFx0cHJvY2Vzc0FyZ3M6IHByb2Nlc3MuYXJndi5qb2luKFwiIFwiKSxcclxuXHRcdFx0aXNCdWlsZGluZzogdGhpcy5pc0J1aWxkaW5nKCksXHJcblx0XHRcdGlzUnVudGltZTogdGhpcy5pc1J1bnRpbWUoKSxcclxuXHRcdH07XHJcblx0fVxyXG59XHJcbiJdLCJuYW1lcyI6WyJCdWlsZENvbnRleHQiLCJfaXNCdWlsZGluZyIsImlzQnVpbGRpbmciLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9CVUlMRF9TS0lQX1dFQlNPQ0tFVCIsInByb2Nlc3NBcmdzIiwiYXJndiIsImpvaW4iLCJpc0J1aWxkQ29tbWFuZCIsImluY2x1ZGVzIiwiYnVpbGRJbmRpY2F0b3JzIiwiTkVYVF9QSEFTRSIsIkJVSUxESU5HIiwiX19ORVhUX1BSSVZBVEVfUFJFQlVORExFRF9SRUFDVCIsInN0YWNrIiwiRXJyb3IiLCJidWlsZFN0YWNrSW5kaWNhdG9ycyIsImhhc1N0YWNrSW5kaWNhdG9yIiwic29tZSIsImluZGljYXRvciIsIkJvb2xlYW4iLCJpc1J1bnRpbWUiLCJzZXRCdWlsZENvbnRleHQiLCJyZXNldCIsImdldEVudmlyb25tZW50SW5mbyIsIk5PREVfRU5WIiwiVkVSQ0VMIiwiaGFzV2luZG93IiwiaGFzUmVxdWVzdENvbnRleHQiLCJnbG9iYWxUaGlzIiwiX19ORVhUX1JFUVVFU1RfQ09OVEVYVF9fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/build-context.ts\n");

/***/ }),

/***/ "(rsc)/./lib/build-logger.ts":
/*!*****************************!*\
  !*** ./lib/build-logger.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuildLogger: () => (/* binding */ BuildLogger),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   buildLogger: () => (/* binding */ buildLogger)\n/* harmony export */ });\n/* harmony import */ var _build_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build-context */ \"(rsc)/./lib/build-context.ts\");\n/**\r\n * Enhanced logging utility for build processes\r\n * Provides structured logging with context awareness\r\n */ \nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n})(LogLevel || (LogLevel = {}));\nclass BuildLogger {\n    static{\n        this.instance = null;\n    }\n    constructor(){\n        this.logs = [];\n        this.minLevel = 1;\n        // Set log level based on environment\n        if (true) {\n            this.minLevel = 0;\n        } else {}\n    }\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new BuildLogger();\n        }\n        return this.instance;\n    }\n    shouldLog(level) {\n        return level >= this.minLevel;\n    }\n    createLogEntry(level, context, message, data) {\n        return {\n            timestamp: new Date().toISOString(),\n            level,\n            context,\n            message,\n            data,\n            buildContext: _build_context__WEBPACK_IMPORTED_MODULE_0__.BuildContext.getEnvironmentInfo()\n        };\n    }\n    formatMessage(entry) {\n        const levelNames = [\n            \"DEBUG\",\n            \"INFO\",\n            \"WARN\",\n            \"ERROR\"\n        ];\n        const levelName = levelNames[entry.level];\n        const buildStatus = entry.buildContext?.isBuilding ? \"[BUILD]\" : \"[RUNTIME]\";\n        let message = `${entry.timestamp} ${buildStatus} ${levelName} [${entry.context}] ${entry.message}`;\n        if (entry.data) {\n            message += ` ${JSON.stringify(entry.data)}`;\n        }\n        return message;\n    }\n    log(level, context, message, data) {\n        if (!this.shouldLog(level)) {\n            return;\n        }\n        const entry = this.createLogEntry(level, context, message, data);\n        this.logs.push(entry);\n        const formattedMessage = this.formatMessage(entry);\n        // Output to console based on level\n        switch(level){\n            case 0:\n                console.debug(formattedMessage);\n                break;\n            case 1:\n                console.log(formattedMessage);\n                break;\n            case 2:\n                console.warn(formattedMessage);\n                break;\n            case 3:\n                console.error(formattedMessage);\n                break;\n        }\n    }\n    debug(context, message, data) {\n        this.log(0, context, message, data);\n    }\n    info(context, message, data) {\n        this.log(1, context, message, data);\n    }\n    warn(context, message, data) {\n        this.log(2, context, message, data);\n    }\n    error(context, message, data) {\n        this.log(3, context, message, data);\n    }\n    // Specialized logging methods for build processes\n    buildStep(step, message, data) {\n        this.info(\"BUILD-STEP\", `${step}: ${message}`, data);\n    }\n    serviceStatus(service, status, message, data) {\n        const level = status === \"error\" ? 3 : 1;\n        this.log(level, \"SERVICE\", `${service} is ${status}${message ? `: ${message}` : \"\"}`, data);\n    }\n    routeStatus(route, type, message) {\n        this.info(\"ROUTE\", `${route} configured as ${type}${message ? `: ${message}` : \"\"}`);\n    }\n    performanceMetric(metric, value, unit) {\n        this.info(\"PERFORMANCE\", `${metric}: ${value}${unit}`);\n    }\n    // Get logs for analysis\n    getLogs(level) {\n        if (level !== undefined) {\n            return this.logs.filter((log)=>log.level >= level);\n        }\n        return [\n            ...this.logs\n        ];\n    }\n    // Get build summary\n    getBuildSummary() {\n        const errorCount = this.logs.filter((log)=>log.level === 3).length;\n        const warningCount = this.logs.filter((log)=>log.level === 2).length;\n        return {\n            totalLogs: this.logs.length,\n            errorCount,\n            warningCount,\n            buildContext: _build_context__WEBPACK_IMPORTED_MODULE_0__.BuildContext.getEnvironmentInfo()\n        };\n    }\n    // Clear logs (useful for testing)\n    clear() {\n        this.logs = [];\n    }\n}\n// Export singleton instance\nconst buildLogger = BuildLogger.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/build-logger.ts\n");

/***/ }),

/***/ "(rsc)/./lib/gcs.ts":
/*!********************!*\
  !*** ./lib/gcs.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GCSManager: () => (/* binding */ GCSManager),\n/* harmony export */   createArtistDataStructure: () => (/* binding */ createArtistDataStructure),\n/* harmony export */   deleteFromArrayFile: () => (/* binding */ deleteFromArrayFile),\n/* harmony export */   gcsManager: () => (/* binding */ gcsManager),\n/* harmony export */   paths: () => (/* binding */ paths),\n/* harmony export */   readJsonDirectory: () => (/* binding */ readJsonDirectory),\n/* harmony export */   readJsonFile: () => (/* binding */ readJsonFile),\n/* harmony export */   upsertArrayFile: () => (/* binding */ upsertArrayFile),\n/* harmony export */   writeJsonFile: () => (/* binding */ writeJsonFile)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-cloud-storage */ \"(rsc)/./lib/google-cloud-storage.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__]);\n_google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Google Cloud Storage utility functions\n// Note: This is a simplified implementation for demonstration\n// In production, you would use the actual Google Cloud Storage SDK\n\n// File paths configuration\nconst paths = {\n    usersIndex: \"users/index.json\",\n    registrationStageManagerDir: \"registrations/stage-managers\",\n    registrationArtistDir: \"registrations/artists\",\n    eventsIndex: \"events/index.json\",\n    stageManagersIndex: \"stage-managers/index.json\",\n    superAdminsIndex: \"super-admins/index.json\",\n    globalArtistsIndex: \"artists/index.json\",\n    stageManagerCounter: \"counters/stage-manager.json\",\n    userByRole: (role, id)=>`users/${role}/${id}.json`,\n    registrationStageManagerFile: (name, id)=>`registrations/stage-managers/${name}-${id}.json`,\n    registrationArtistFile: (name, id)=>`registrations/artists/${name}-${id}.json`,\n    eventFile: (eventId)=>`events/${eventId}.json`,\n    artistFile: (artistId)=>`artists/${artistId}.json`,\n    artistsIndex: (eventId)=>`events/${eventId}/artists/index.json`,\n    stageManagerFile: (stageManagerId)=>`stage-managers/${stageManagerId}.json`,\n    // Emergency paths used by API routes\n    emergencyActive: (eventId)=>`events/${eventId}/emergency/active.json`,\n    emergencyLogDir: (eventId)=>`events/${eventId}/emergency/logs`,\n    emergencyLogFile: (eventId, id)=>`events/${eventId}/emergency/logs/${id}.json`\n};\nclass GCSManager {\n    constructor(bucketName = \"artist-event-storage\"){\n        this.bucketName = bucketName;\n    }\n    /**\r\n\t * Upload a file to Google Cloud Storage\r\n\t */ async uploadFile(file, folder, artistId) {\n        try {\n            // Generate unique filename\n            const timestamp = Date.now();\n            const randomId = Math.random().toString(36).substring(2, 9);\n            const extension = file.name.split(\".\").pop();\n            const filename = `${timestamp}_${randomId}.${extension}`;\n            // Convert File to Buffer\n            const arrayBuffer = await file.arrayBuffer();\n            const buffer = Buffer.from(arrayBuffer);\n            // Upload to Google Cloud Storage\n            const result = await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].uploadFile(buffer, filename, `${folder}/${artistId}`, file.type);\n            return {\n                url: result.url,\n                filename: result.filename,\n                size: file.size,\n                contentType: file.type\n            };\n        } catch (error) {\n            console.error(\"Error uploading file to Google Cloud Storage:\", error);\n            throw new Error(\"Failed to upload file to Google Cloud Storage\");\n        }\n    }\n    /**\r\n\t * Upload multiple files\r\n\t */ async uploadFiles(files, folder, artistId) {\n        const uploadPromises = files.map((file)=>this.uploadFile(file, folder, artistId));\n        return Promise.all(uploadPromises);\n    }\n    /**\r\n\t * Delete a file from Google Cloud Storage\r\n\t */ async deleteFile(filename) {\n        try {\n            await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteFile(filename);\n        } catch (error) {\n            console.error(\"Error deleting file from Google Cloud Storage:\", error);\n            throw new Error(\"Failed to delete file from Google Cloud Storage\");\n        }\n    }\n    /**\r\n\t * Get a signed URL for file access\r\n\t */ async getSignedUrl(filename, expiresIn = 3600) {\n        try {\n            return await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getSignedUrl(filename, expiresIn);\n        } catch (error) {\n            console.error(\"Error generating signed URL from Google Cloud Storage:\", error);\n            throw new Error(\"Failed to generate signed URL from Google Cloud Storage\");\n        }\n    }\n}\n// Export a default instance\nconst gcsManager = new GCSManager();\nasync function readJsonFile(path, defaultValue = null) {\n    try {\n        const data = await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].readJSON(path);\n        return data !== null ? data : defaultValue;\n    } catch (error) {\n        console.error(\"Error reading JSON file from Google Cloud Storage:\", error);\n        return defaultValue;\n    }\n}\n/**\r\n * Write JSON file to Google Cloud Storage\r\n */ async function writeJsonFile(path, data) {\n    try {\n        await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].saveJSON(data, path);\n    } catch (error) {\n        console.error(\"Error writing JSON file to Google Cloud Storage:\", error);\n        throw new Error(\"Failed to write JSON file to Google Cloud Storage\");\n    }\n}\n/**\r\n * Read all JSON files from a directory in Google Cloud Storage\r\n */ async function readJsonDirectory(dirPath) {\n    try {\n        const files = await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].listFiles(dirPath);\n        const jsonFiles = files.filter((file)=>file.endsWith(\".json\"));\n        const results = [];\n        for (const file of jsonFiles){\n            const data = await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].readJSON(file);\n            if (data !== null) {\n                results.push(data);\n            }\n        }\n        return results;\n    } catch (error) {\n        console.error(\"Error reading JSON directory from Google Cloud Storage:\", error);\n        return [];\n    }\n}\n/**\r\n * Upsert (insert or update) an item in an array file\r\n */ async function upsertArrayFile(path, item, matchField = \"id\") {\n    try {\n        const existingData = await readJsonFile(path, []);\n        const array = existingData || [];\n        const existingIndex = array.findIndex((existing)=>existing[matchField] === item[matchField]);\n        if (existingIndex >= 0) {\n            // Update existing item\n            array[existingIndex] = {\n                ...array[existingIndex],\n                ...item\n            };\n        } else {\n            // Add new item\n            array.push(item);\n        }\n        await writeJsonFile(path, array);\n    } catch (error) {\n        console.error(\"Error upserting array file:\", error);\n        throw new Error(\"Failed to upsert array file\");\n    }\n}\n/**\r\n * Delete an item from an array file\r\n */ async function deleteFromArrayFile(path, itemId, matchField = \"id\") {\n    try {\n        const existingData = await readJsonFile(path, []);\n        const array = existingData || [];\n        const filteredArray = array.filter((item)=>item[matchField] !== itemId);\n        await writeJsonFile(path, filteredArray);\n    } catch (error) {\n        console.error(\"Error deleting from array file:\", error);\n        throw new Error(\"Failed to delete from array file\");\n    }\n}\n// Helper function to organize artist data in GCS-like structure\nfunction createArtistDataStructure(artistData) {\n    const artistId = artistData.id;\n    const eventId = artistData.eventId;\n    return {\n        // Main artist data\n        profile: {\n            path: `artists/${artistId}/profile.json`,\n            data: {\n                id: artistData.id,\n                artistName: artistData.artistName,\n                realName: artistData.realName,\n                email: artistData.email,\n                phone: artistData.phone,\n                style: artistData.style,\n                performanceType: artistData.performanceType,\n                performanceDuration: artistData.performanceDuration,\n                biography: artistData.biography,\n                createdAt: artistData.createdAt,\n                status: artistData.status\n            }\n        },\n        // Technical specifications\n        technical: {\n            path: `artists/${artistId}/technical.json`,\n            data: {\n                costumeColor: artistData.costumeColor,\n                customCostumeColor: artistData.customCostumeColor,\n                lightColorSingle: artistData.lightColorSingle,\n                lightColorTwo: artistData.lightColorTwo,\n                lightColorThree: artistData.lightColorThree,\n                lightRequests: artistData.lightRequests,\n                stagePositionStart: artistData.stagePositionStart,\n                stagePositionEnd: artistData.stagePositionEnd,\n                customStagePosition: artistData.customStagePosition\n            }\n        },\n        // Social media and links\n        social: {\n            path: `artists/${artistId}/social.json`,\n            data: {\n                socialMedia: artistData.socialMedia,\n                showLink: artistData.showLink\n            }\n        },\n        // Notes and communications\n        notes: {\n            path: `artists/${artistId}/notes.json`,\n            data: {\n                mcNotes: artistData.mcNotes,\n                stageManagerNotes: artistData.stageManagerNotes,\n                specialRequirements: artistData.specialRequirements\n            }\n        },\n        // Music tracks metadata\n        music: {\n            path: `artists/${artistId}/music.json`,\n            data: {\n                tracks: artistData.musicTracks?.map((track)=>({\n                        song_title: track.song_title,\n                        duration: track.duration,\n                        notes: track.notes,\n                        is_main_track: track.is_main_track,\n                        tempo: track.tempo,\n                        file_path: `artists/${artistId}/music/${track.song_title.replace(/[^a-zA-Z0-9]/g, \"_\")}.mp3`\n                    })) || []\n            }\n        },\n        // Gallery metadata\n        gallery: {\n            path: `artists/${artistId}/gallery.json`,\n            data: {\n                files: artistData.galleryFiles?.map((file, index)=>({\n                        name: file.name,\n                        type: file.type,\n                        file_path: file.type === \"video\" ? `artists/${artistId}/videos/${file.name}` : `artists/${artistId}/images/${file.name}`\n                    })) || []\n            }\n        },\n        // Event association\n        event: {\n            path: `events/${eventId}/artists/${artistId}.json`,\n            data: {\n                artistId: artistData.id,\n                artistName: artistData.artistName,\n                eventId: artistData.eventId,\n                eventName: artistData.eventName,\n                status: artistData.status,\n                registrationDate: artistData.createdAt\n            }\n        }\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/gcs.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-cloud-storage.ts":
/*!*************************************!*\
  !*** ./lib/google-cloud-storage.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GCSService: () => (/* binding */ GCSService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/storage */ \"@google-cloud/storage\");\n/* harmony import */ var _service_isolation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./service-isolation */ \"(rsc)/./lib/service-isolation.ts\");\n/* harmony import */ var _build_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./build-logger */ \"(rsc)/./lib/build-logger.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__]);\n_google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Initialize Google Cloud Storage\nlet storage = null;\nlet bucket = null;\nconst bucketName = process.env.GOOGLE_CLOUD_BUCKET_NAME || \"fame-data\";\n// Initialize Google Cloud Storage only at runtime\nfunction initializeGCS() {\n    if (!_service_isolation__WEBPACK_IMPORTED_MODULE_1__.ServiceIsolation.isServiceEnabled(\"google-cloud-storage\")) {\n        _build_logger__WEBPACK_IMPORTED_MODULE_2__.buildLogger.serviceStatus(\"google-cloud-storage\", \"disabled\", \"Service isolation active\");\n        return false;\n    }\n    if (storage && bucket) {\n        return true; // Already initialized\n    }\n    try {\n        // Try different authentication methods\n        if (process.env.GOOGLE_CLOUD_PROJECT_ID) {\n            const storageConfig = {\n                projectId: process.env.GOOGLE_CLOUD_PROJECT_ID\n            };\n            // Use key file if provided\n            if (process.env.GOOGLE_CLOUD_KEY_FILE) {\n                storageConfig.keyFilename = process.env.GOOGLE_CLOUD_KEY_FILE;\n            } else if (process.env.GOOGLE_CLOUD_CREDENTIALS) {\n                storageConfig.credentials = JSON.parse(process.env.GOOGLE_CLOUD_CREDENTIALS);\n            }\n            storage = new _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__.Storage(storageConfig);\n            bucket = storage.bucket(bucketName);\n            _build_logger__WEBPACK_IMPORTED_MODULE_2__.buildLogger.serviceStatus(\"google-cloud-storage\", \"enabled\", `Initialized with bucket: ${bucketName}`, {\n                bucketName\n            });\n            return true;\n        } else {\n            console.error(\"Google Cloud Storage not configured: Missing GOOGLE_CLOUD_PROJECT_ID\");\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Failed to initialize Google Cloud Storage:\", error);\n        return false;\n    }\n}\nconst signedUrlCache = new Map();\nclass GCSService {\n    /**\r\n\t * Check if a URL is a blob URL that needs to be replaced\r\n\t */ static isBlobUrl(url) {\n        return typeof url === \"string\" && (url.startsWith(\"blob:\") || url === \"\" || !url);\n    }\n    /**\r\n\t * Clear expired entries from the signed URL cache\r\n\t */ static clearExpiredCache() {\n        const now = Date.now();\n        for (const [key, cached] of signedUrlCache.entries()){\n            if (cached.expiresAt <= now) {\n                signedUrlCache.delete(key);\n            }\n        }\n    }\n    /**\r\n\t * Check if a file exists in Google Cloud Storage\r\n\t */ static async fileExists(path) {\n        try {\n            if (!initializeGCS() || !bucket) {\n                console.log(`GCS not available, returning false for file exists check: ${path}`);\n                return false;\n            }\n            const gcsFile = bucket.file(path);\n            const [exists] = await gcsFile.exists();\n            return exists;\n        } catch (error) {\n            console.error(`Error checking if file exists: ${path}`, error);\n            return false;\n        }\n    }\n    /**\r\n\t * Upload a file to Google Cloud Storage with enhanced error handling\r\n\t */ static async uploadFile(file, filename, folder, contentType) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            const gcsPath = `${folder}/${filename}`;\n            const gcsFile = bucket.file(gcsPath);\n            await gcsFile.save(file, {\n                metadata: {\n                    contentType\n                },\n                public: false\n            });\n            // Generate initial signed URL with proper error handling\n            const signedUrl = await this.getSignedUrl(gcsPath, 24 * 60 * 60);\n            return {\n                url: signedUrl,\n                filename,\n                size: file.length,\n                contentType,\n                gcsPath\n            };\n        } catch (error) {\n            console.error(\"Error uploading file to Google Cloud Storage:\", error);\n            throw new Error(\"Failed to upload file to Google Cloud Storage\");\n        }\n    }\n    /**\r\n\t * Save JSON data to Google Cloud Storage\r\n\t */ static async saveJSON(data, path) {\n        try {\n            if (!initializeGCS() || !bucket) {\n                console.log(`GCS not available, skipping JSON save: ${path}`);\n                return;\n            }\n            const jsonData = JSON.stringify(data, null, 2);\n            const gcsFile = bucket.file(path);\n            await gcsFile.save(jsonData, {\n                metadata: {\n                    contentType: \"application/json\"\n                }\n            });\n            console.log(`JSON data saved to GCS: ${path}`);\n        } catch (error) {\n            console.error(\"Error saving JSON to Google Cloud Storage:\", error);\n            throw new Error(\"Failed to save data to Google Cloud Storage\");\n        }\n    }\n    /**\r\n\t * Read JSON data from Google Cloud Storage\r\n\t */ static async readJSON(path) {\n        try {\n            if (!initializeGCS() || !bucket) {\n                console.log(`GCS not available, returning null for JSON read: ${path}`);\n                return null;\n            }\n            const gcsFile = bucket.file(path);\n            const [exists] = await gcsFile.exists();\n            if (!exists) {\n                console.log(`File not found in GCS: ${path}`);\n                return null;\n            }\n            const [contents] = await gcsFile.download();\n            const data = JSON.parse(contents.toString());\n            console.log(`JSON data read from GCS: ${path}`);\n            return data;\n        } catch (error) {\n            console.error(\"Error reading JSON from Google Cloud Storage:\", error);\n            return null;\n        }\n    }\n    /**\r\n\t * List files in a folder\r\n\t */ static async listFiles(prefix) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            const [files] = await bucket.getFiles({\n                prefix\n            });\n            const fileNames = files.map((file)=>file.name);\n            console.log(`Listed ${fileNames.length} files from GCS with prefix: ${prefix}`);\n            return fileNames;\n        } catch (error) {\n            console.error(\"Error listing files from Google Cloud Storage:\", error);\n            return [];\n        }\n    }\n    /**\r\n\t * Delete a file from Google Cloud Storage\r\n\t */ static async deleteFile(path) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            const gcsFile = bucket.file(path);\n            await gcsFile.delete();\n            console.log(`File deleted from GCS: ${path}`);\n        } catch (error) {\n            console.error(\"Error deleting file from Google Cloud Storage:\", error);\n            throw new Error(\"Failed to delete file from Google Cloud Storage\");\n        }\n    }\n    /**\r\n\t * Get signed URL for file access with caching\r\n\t */ static async getSignedUrl(path, expiresIn = 3600) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            // Clean up expired cache entries periodically\n            this.clearExpiredCache();\n            // Check cache first (with 5-minute buffer before expiration)\n            const cacheKey = `${path}:${expiresIn}`;\n            const cached = signedUrlCache.get(cacheKey);\n            const now = Date.now();\n            if (cached && cached.expiresAt > now + 5 * 60 * 1000) {\n                console.log(`Using cached signed URL for GCS file: ${path}`);\n                return cached.url;\n            }\n            // Generate new signed URL\n            const gcsFile = bucket.file(path);\n            const expirationTime = Date.now() + expiresIn * 1000;\n            const [signedUrl] = await gcsFile.getSignedUrl({\n                action: \"read\",\n                expires: expirationTime\n            });\n            // Cache the URL (expires 5 minutes before actual expiration for safety)\n            signedUrlCache.set(cacheKey, {\n                url: signedUrl,\n                expiresAt: expirationTime - 5 * 60 * 1000\n            });\n            console.log(`Generated and cached signed URL for GCS file: ${path}`);\n            return signedUrl;\n        } catch (error) {\n            console.error(\"Error generating signed URL for Google Cloud Storage:\", error);\n            throw new Error(\"Failed to generate signed URL from Google Cloud Storage\");\n        }\n    }\n    /**\r\n\t * Save artist data in organized folder structure\r\n\t */ static async saveArtistData(artistData) {\n        const artistId = artistData.id;\n        const eventId = artistData.eventId;\n        try {\n            // Debug: Log what performance data is being saved\n            console.log(`🔧 GCS saveArtistData for ${artistId} - Performance fields:`, {\n                performance_order: artistData.performance_order,\n                performance_status: artistData.performance_status,\n                performance_date: artistData.performance_date || artistData.performanceDate\n            });\n            // Save main profile data\n            await this.saveJSON({\n                id: artistData.id,\n                artistName: artistData.artistName,\n                realName: artistData.realName,\n                email: artistData.email,\n                phone: artistData.phone,\n                style: artistData.style,\n                performanceType: artistData.performanceType,\n                performanceDuration: artistData.performanceDuration,\n                biography: artistData.biography,\n                createdAt: artistData.createdAt,\n                updatedAt: artistData.updatedAt,\n                status: artistData.status,\n                statusHistory: artistData.statusHistory,\n                eventId: artistData.eventId,\n                eventName: artistData.eventName,\n                // Performance assignment fields - support both formats\n                performanceDate: artistData.performanceDate || artistData.performance_date,\n                performance_date: artistData.performance_date || artistData.performanceDate,\n                // Performance order and status fields\n                performance_order: artistData.performance_order !== undefined ? artistData.performance_order : null,\n                performance_status: artistData.performance_status || null,\n                // Rehearsal scheduling fields\n                rehearsal_date: artistData.rehearsal_date || null,\n                rehearsal_order: artistData.rehearsal_order || null,\n                rehearsal_completed: artistData.rehearsal_completed || false,\n                quality_rating: artistData.quality_rating || null\n            }, `artists/${artistId}/profile.json`);\n            // Save technical specifications\n            await this.saveJSON({\n                costumeColor: artistData.costumeColor,\n                customCostumeColor: artistData.customCostumeColor,\n                lightColorSingle: artistData.lightColorSingle,\n                lightColorTwo: artistData.lightColorTwo,\n                lightColorThree: artistData.lightColorThree,\n                lightRequests: artistData.lightRequests,\n                stagePositionStart: artistData.stagePositionStart,\n                stagePositionEnd: artistData.stagePositionEnd,\n                customStagePosition: artistData.customStagePosition,\n                equipment: artistData.equipment,\n                specialRequirements: artistData.specialRequirements\n            }, `artists/${artistId}/technical.json`);\n            // Save social media and links\n            await this.saveJSON({\n                socialMedia: artistData.socialMedia,\n                showLink: artistData.showLink\n            }, `artists/${artistId}/social.json`);\n            // Save notes and communications\n            await this.saveJSON({\n                mcNotes: artistData.mcNotes,\n                stageManagerNotes: artistData.stageManagerNotes,\n                notes: artistData.notes\n            }, `artists/${artistId}/notes.json`);\n            // Save music tracks metadata\n            await this.saveJSON({\n                tracks: artistData.musicTracks || []\n            }, `artists/${artistId}/music.json`);\n            // Save gallery metadata\n            await this.saveJSON({\n                files: artistData.galleryFiles || []\n            }, `artists/${artistId}/gallery.json`);\n            // Save event association\n            await this.saveJSON({\n                artistId: artistData.id,\n                artistName: artistData.artistName,\n                eventId: artistData.eventId,\n                eventName: artistData.eventName,\n                status: artistData.status,\n                statusHistory: artistData.statusHistory,\n                registrationDate: artistData.createdAt,\n                updatedAt: artistData.updatedAt,\n                // Performance assignment fields - support both formats\n                performanceDate: artistData.performanceDate || artistData.performance_date,\n                performance_date: artistData.performance_date || artistData.performanceDate,\n                // Performance order and status fields\n                performance_order: artistData.performance_order !== undefined ? artistData.performance_order : null,\n                performance_status: artistData.performance_status || null,\n                // Rehearsal fields\n                rehearsal_completed: artistData.rehearsal_completed,\n                quality_rating: artistData.quality_rating\n            }, `events/${eventId}/artists/${artistId}.json`);\n            console.log(`Artist data saved to storage for artist: ${artistId}`);\n        } catch (error) {\n            console.error(\"Error saving artist data:\", error);\n            throw error;\n        }\n    }\n    /**\r\n\t * Get complete artist data from storage\r\n\t */ static async getArtistData(artistId) {\n        try {\n            const [profile, technical, social, notes, music, gallery] = await Promise.all([\n                this.readJSON(`artists/${artistId}/profile.json`),\n                this.readJSON(`artists/${artistId}/technical.json`),\n                this.readJSON(`artists/${artistId}/social.json`),\n                this.readJSON(`artists/${artistId}/notes.json`),\n                this.readJSON(`artists/${artistId}/music.json`),\n                this.readJSON(`artists/${artistId}/gallery.json`)\n            ]);\n            if (!profile) {\n                return null;\n            }\n            // Debug: Log what performance data is being loaded from profile.json\n            console.log(`🔍 GCS getArtistData for ${artistId} - Profile data loaded:`, {\n                performance_order: profile.performance_order,\n                performance_status: profile.performance_status,\n                performance_date: profile.performance_date || profile.performanceDate,\n                rehearsal_completed: profile.rehearsal_completed\n            });\n            // Enrich media with fresh signed URLs\n            const rawTracks = Array.isArray(music?.tracks) ? music.tracks : [];\n            const musicTracks = await Promise.all(rawTracks.map(async (t)=>{\n                const track = {\n                    ...t\n                };\n                const isBlob = this.isBlobUrl(track.file_url);\n                if ((isBlob || !track.file_url) && track.file_path) {\n                    try {\n                        track.file_url = await this.getSignedUrl(track.file_path, 24 * 60 * 60);\n                    } catch (e) {\n                        console.error(\"Failed to sign music track path:\", track.file_path, e);\n                        // Set to null so UI can handle the error\n                        track.file_url = null;\n                    }\n                }\n                return track;\n            }));\n            const rawFiles = Array.isArray(gallery?.files) ? gallery.files : [];\n            const galleryFiles = await Promise.all(rawFiles.map(async (f)=>{\n                const file = {\n                    ...f\n                };\n                const isBlob = this.isBlobUrl(file.file_url);\n                if ((isBlob || !file.file_url) && file.file_path) {\n                    try {\n                        file.file_url = await this.getSignedUrl(file.file_path, 24 * 60 * 60);\n                    } catch (e) {\n                        console.error(\"Failed to sign gallery file path:\", file.file_path, e);\n                        // Set to null so UI can handle the error\n                        file.file_url = null;\n                    }\n                }\n                return file;\n            }));\n            const mergedData = {\n                ...profile,\n                ...technical,\n                ...social,\n                ...notes,\n                musicTracks,\n                galleryFiles\n            };\n            // Debug: Log what performance data is being returned after merge\n            console.log(`🔍 GCS getArtistData for ${artistId} - Final merged data:`, {\n                performance_order: mergedData.performance_order,\n                performance_status: mergedData.performance_status,\n                performance_date: mergedData.performance_date || mergedData.performanceDate,\n                rehearsal_completed: mergedData.rehearsal_completed\n            });\n            return mergedData;\n        } catch (error) {\n            console.error(\"Error getting artist data:\", error);\n            return null;\n        }\n    }\n    /**\r\n\t * Batch fetch multiple artists efficiently\r\n\t */ static async batchGetArtistData(artistIds) {\n        try {\n            // Batch all file reads for all artists\n            const allFileReads = artistIds.flatMap((artistId)=>[\n                    this.readJSON(`artists/${artistId}/profile.json`),\n                    this.readJSON(`artists/${artistId}/technical.json`),\n                    this.readJSON(`artists/${artistId}/social.json`),\n                    this.readJSON(`artists/${artistId}/notes.json`),\n                    this.readJSON(`artists/${artistId}/music.json`),\n                    this.readJSON(`artists/${artistId}/gallery.json`)\n                ]);\n            // Execute all reads in parallel\n            const allResults = await Promise.all(allFileReads);\n            // Process results for each artist\n            const artists = await Promise.all(artistIds.map(async (artistId, index)=>{\n                const baseIndex = index * 6;\n                const [profile, technical, social, notes, music, gallery] = allResults.slice(baseIndex, baseIndex + 6);\n                if (!profile) {\n                    return null;\n                }\n                // Process media files with lazy loading approach\n                const rawTracks = Array.isArray(music?.tracks) ? music.tracks : [];\n                const rawFiles = Array.isArray(gallery?.files) ? gallery.files : [];\n                // Only generate signed URLs for media that will be immediately visible\n                // For performance, we'll defer URL generation for gallery files\n                const musicTracks = await Promise.all(rawTracks.slice(0, 3).map(async (t)=>{\n                    // Only first 3 tracks\n                    const track = {\n                        ...t\n                    };\n                    if (this.isBlobUrl(track.file_url) && track.file_path) {\n                        try {\n                            track.file_url = await this.getSignedUrl(track.file_path, 24 * 60 * 60);\n                        } catch (e) {\n                            console.error(\"Failed to sign music track path:\", track.file_path, e);\n                            track.file_url = null;\n                        }\n                    }\n                    return track;\n                }));\n                // Add remaining tracks without URLs (lazy loading)\n                const remainingTracks = rawTracks.slice(3).map((t)=>({\n                        ...t,\n                        file_url: t.file_path ? null : t.file_url,\n                        needsUrl: !!t.file_path\n                    }));\n                // For gallery, only process first few images for preview\n                const galleryFiles = rawFiles.slice(0, 6).map((f)=>({\n                        ...f,\n                        url: f.file_path ? null : f.url,\n                        needsUrl: !!f.file_path\n                    }));\n                return {\n                    ...profile,\n                    ...technical,\n                    ...social,\n                    ...notes,\n                    musicTracks: [\n                        ...musicTracks,\n                        ...remainingTracks\n                    ],\n                    galleryFiles,\n                    totalMusicTracks: rawTracks.length,\n                    totalGalleryFiles: rawFiles.length\n                };\n            }));\n            return artists.filter((artist)=>artist !== null);\n        } catch (error) {\n            console.error(\"Error batch getting artist data:\", error);\n            return [];\n        }\n    }\n    /**\r\n\t * Lazy load media URLs for a specific artist\r\n\t */ static async loadArtistMediaUrls(artistId, mediaType, startIndex = 0, count = 10) {\n        try {\n            const mediaData = mediaType === \"music\" ? await this.readJSON(`artists/${artistId}/music.json`) : await this.readJSON(`artists/${artistId}/gallery.json`);\n            const items = mediaType === \"music\" ? Array.isArray(mediaData?.tracks) ? mediaData.tracks : [] : Array.isArray(mediaData?.files) ? mediaData.files : [];\n            const selectedItems = items.slice(startIndex, startIndex + count);\n            // Generate signed URLs for the requested items\n            const itemsWithUrls = await Promise.all(selectedItems.map(async (item)=>{\n                const urlField = mediaType === \"music\" ? \"file_url\" : \"url\";\n                const pathField = mediaType === \"music\" ? \"file_path\" : \"file_path\";\n                if (this.isBlobUrl(item[urlField]) && item[pathField]) {\n                    try {\n                        item[urlField] = await this.getSignedUrl(item[pathField], 24 * 60 * 60);\n                    } catch (e) {\n                        console.error(`Failed to sign ${mediaType} path:`, item[pathField], e);\n                        item[urlField] = null;\n                    }\n                }\n                return item;\n            }));\n            return itemsWithUrls;\n        } catch (error) {\n            console.error(`Error loading ${mediaType} URLs for artist ${artistId}:`, error);\n            return [];\n        }\n    }\n    /**\r\n\t * Get all artists for an event (simplified for demo)\r\n\t */ static async getEventArtists(eventId) {\n        try {\n            // For demo purposes, we'll return a sample artist if no real data exists\n            const sampleArtist = {\n                id: \"artist_1755011489205_xswjcvfdv\",\n                artistName: \"Water Festival Stage\",\n                realName: \"John Wick (Htoo Aung Wai)\",\n                email: \"john@gmail.com\",\n                phone: \"052 211 6024\",\n                style: \"Death Metal\",\n                performanceType: \"other\",\n                performanceDuration: 5,\n                biography: \"I like Death Metal.\",\n                costumeColor: \"red\",\n                lightColorSingle: \"blue\",\n                lightColorTwo: \"magenta\",\n                lightColorThree: \"amber\",\n                stagePositionStart: \"downstage-left\",\n                stagePositionEnd: \"left\",\n                socialMedia: {\n                    instagram: \"https://www.officeolympics.io\",\n                    facebook: \"https://www.officeolympics.io\",\n                    youtube: \"https://www.officeolympics.io\",\n                    tiktok: \"https://www.officeolympics.io\",\n                    website: \"https://www.officeolympics.io\"\n                },\n                eventId,\n                eventName: \"EDM Festival\",\n                status: \"pending\",\n                createdAt: \"2025-08-12T15:11:29.205Z\",\n                musicTracks: [\n                    {\n                        song_title: \"Metal\",\n                        duration: 2,\n                        notes: \"No one\",\n                        is_main_track: true,\n                        tempo: \"medium\"\n                    }\n                ],\n                galleryFiles: []\n            };\n            return [\n                sampleArtist\n            ];\n        } catch (error) {\n            console.error(\"Error getting event artists:\", error);\n            return [];\n        }\n    }\n    // ===== PERFORMANCE ORDER MANAGEMENT FUNCTIONS =====\n    /**\r\n\t * Save timing settings for an event\r\n\t */ static async saveTimingSettings(eventId, settings) {\n        try {\n            const timingData = {\n                eventId,\n                ...settings,\n                updated_at: settings.updated_at || new Date().toISOString()\n            };\n            await this.saveJSON(timingData, `events/${eventId}/timing-settings/settings.json`);\n            console.log(`Timing settings saved for event: ${eventId}`);\n        } catch (error) {\n            console.error(\"Error saving timing settings:\", error);\n            throw new Error(\"Failed to save timing settings to GCS\");\n        }\n    }\n    /**\r\n\t * Get timing settings for an event\r\n\t */ static async getTimingSettings(eventId) {\n        try {\n            const settings = await this.readJSON(`events/${eventId}/timing-settings/settings.json`);\n            console.log(`Timing settings retrieved for event: ${eventId}`);\n            return settings;\n        } catch (error) {\n            console.error(\"Error getting timing settings:\", error);\n            return null;\n        }\n    }\n    /**\r\n\t * Save a cue for a specific performance date\r\n\t */ static async saveCue(eventId, performanceDate, cue) {\n        try {\n            const cueData = {\n                ...cue,\n                eventId,\n                performanceDate,\n                created_at: cue.created_at || new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n            await this.saveJSON(cueData, `events/${eventId}/cues/${performanceDate}/${cue.id}.json`);\n            console.log(`Cue saved: ${cue.id} for event: ${eventId}, date: ${performanceDate}`);\n        } catch (error) {\n            console.error(\"Error saving cue:\", error);\n            throw new Error(\"Failed to save cue to GCS\");\n        }\n    }\n    /**\r\n\t * Get all cues for a specific performance date\r\n\t */ static async getCues(eventId, performanceDate) {\n        try {\n            const prefix = `events/${eventId}/cues/${performanceDate}/`;\n            const fileNames = await this.listFiles(prefix);\n            const cues = await Promise.all(fileNames.map(async (fileName)=>{\n                return await this.readJSON(fileName);\n            }));\n            const validCues = cues.filter((cue)=>cue !== null);\n            console.log(`Retrieved ${validCues.length} cues for event: ${eventId}, date: ${performanceDate}`);\n            return validCues;\n        } catch (error) {\n            console.error(\"Error getting cues:\", error);\n            return [];\n        }\n    }\n    /**\r\n\t * Delete a cue\r\n\t */ static async deleteCue(eventId, performanceDate, cueId) {\n        try {\n            const path = `events/${eventId}/cues/${performanceDate}/${cueId}.json`;\n            await this.deleteFile(path);\n            console.log(`Cue deleted: ${cueId} for event: ${eventId}, date: ${performanceDate}`);\n        } catch (error) {\n            console.error(\"Error deleting cue:\", error);\n            throw new Error(\"Failed to delete cue from GCS\");\n        }\n    }\n    /**\r\n\t * Save show order for a specific performance date\r\n\t */ static async saveShowOrder(eventId, performanceDate, showOrderItems) {\n        try {\n            const showOrderData = {\n                eventId,\n                performanceDate,\n                items: showOrderItems,\n                updated_at: new Date().toISOString()\n            };\n            await this.saveJSON(showOrderData, `events/${eventId}/performance-orders/${performanceDate}/show-order.json`);\n            console.log(`Show order saved for event: ${eventId}, date: ${performanceDate}`);\n        } catch (error) {\n            console.error(\"Error saving show order:\", error);\n            throw new Error(\"Failed to save show order to GCS\");\n        }\n    }\n    /**\r\n\t * Get show order for a specific performance date\r\n\t */ static async getShowOrder(eventId, performanceDate) {\n        try {\n            const showOrder = await this.readJSON(`events/${eventId}/performance-orders/${performanceDate}/show-order.json`);\n            console.log(`Show order retrieved for event: ${eventId}, date: ${performanceDate}`);\n            return showOrder;\n        } catch (error) {\n            console.error(\"Error getting show order:\", error);\n            return null;\n        }\n    }\n    /**\r\n\t * Update artist performance status\r\n\t */ static async updateArtistPerformanceStatus(artistId, eventId, updates) {\n        try {\n            // Get current artist data\n            const currentData = await this.getArtistData(artistId);\n            if (!currentData) {\n                throw new Error(`Artist not found: ${artistId}`);\n            }\n            // Update the profile with new performance data\n            const updatedProfile = {\n                ...currentData,\n                ...updates,\n                // Ensure both field formats are updated\n                performanceDate: updates.performance_date || currentData.performanceDate,\n                performance_date: updates.performance_date || currentData.performance_date,\n                updatedAt: new Date().toISOString()\n            };\n            // Save updated profile\n            await this.saveJSON({\n                id: updatedProfile.id,\n                artistName: updatedProfile.artistName,\n                realName: updatedProfile.realName,\n                email: updatedProfile.email,\n                phone: updatedProfile.phone,\n                style: updatedProfile.style,\n                performanceType: updatedProfile.performanceType,\n                performanceDuration: updatedProfile.performanceDuration,\n                biography: updatedProfile.biography,\n                createdAt: updatedProfile.createdAt,\n                updatedAt: updatedProfile.updatedAt,\n                status: updatedProfile.status,\n                statusHistory: updatedProfile.statusHistory,\n                eventId: updatedProfile.eventId,\n                eventName: updatedProfile.eventName,\n                performanceDate: updates.performance_date || updatedProfile.performanceDate,\n                performance_date: updates.performance_date || updatedProfile.performance_date,\n                rehearsal_date: updatedProfile.rehearsal_date,\n                rehearsal_order: updatedProfile.rehearsal_order,\n                rehearsal_completed: updatedProfile.rehearsal_completed,\n                quality_rating: updatedProfile.quality_rating,\n                performance_status: updates.performance_status || updatedProfile.performance_status,\n                performance_order: updates.performance_order !== undefined ? updates.performance_order : updatedProfile.performance_order\n            }, `artists/${artistId}/profile.json`);\n            // Also update the event association\n            await this.saveJSON({\n                artistId: updatedProfile.id,\n                artistName: updatedProfile.artistName,\n                eventId: updatedProfile.eventId,\n                eventName: updatedProfile.eventName,\n                status: updatedProfile.status,\n                statusHistory: updatedProfile.statusHistory,\n                registrationDate: updatedProfile.createdAt,\n                updatedAt: updatedProfile.updatedAt,\n                performanceDate: updates.performance_date || updatedProfile.performanceDate,\n                performance_date: updates.performance_date || updatedProfile.performance_date,\n                performance_status: updates.performance_status || updatedProfile.performance_status,\n                performance_order: updates.performance_order !== undefined ? updates.performance_order : updatedProfile.performance_order\n            }, `events/${eventId}/artists/${artistId}.json`);\n            console.log(`Artist performance status updated: ${artistId}`);\n        } catch (error) {\n            console.error(\"Error updating artist performance status:\", error);\n            throw new Error(\"Failed to update artist performance status in GCS\");\n        }\n    }\n    // ===== ARTIST STATUS CACHING FUNCTIONS =====\n    /**\r\n\t * Save cache metadata for an event\r\n\t */ static async saveCacheMetadata(eventId, metadata) {\n        try {\n            await this.saveJSON(metadata, `events/${eventId}/artist-statuses/cache-metadata.json`);\n            console.log(`Cache metadata saved for event: ${eventId}`);\n        } catch (error) {\n            console.error(\"Error saving cache metadata:\", error);\n            throw new Error(\"Failed to save cache metadata to GCS\");\n        }\n    }\n    /**\r\n\t * Get cache metadata for an event\r\n\t */ static async getCacheMetadata(eventId) {\n        try {\n            const metadata = await this.readJSON(`events/${eventId}/artist-statuses/cache-metadata.json`);\n            return metadata;\n        } catch (error) {\n            console.error(\"Error getting cache metadata:\", error);\n            return null;\n        }\n    }\n    /**\r\n\t * Save current artist statuses for a performance date\r\n\t */ static async saveCurrentStatuses(eventId, performanceDate, statuses) {\n        try {\n            const statusData = {\n                eventId,\n                performanceDate,\n                statuses,\n                updated_at: new Date().toISOString(),\n                version: Date.now()\n            };\n            await this.saveJSON(statusData, `events/${eventId}/artist-statuses/${performanceDate}/current-statuses.json`);\n            console.log(`Current statuses saved for event: ${eventId}, date: ${performanceDate}`);\n        } catch (error) {\n            console.error(\"Error saving current statuses:\", error);\n            throw new Error(\"Failed to save current statuses to GCS\");\n        }\n    }\n    /**\r\n\t * Get current artist statuses for a performance date\r\n\t */ static async getCurrentStatuses(eventId, performanceDate) {\n        try {\n            const statusData = await this.readJSON(`events/${eventId}/artist-statuses/${performanceDate}/current-statuses.json`);\n            if (!statusData || !Array.isArray(statusData.statuses)) {\n                return [];\n            }\n            console.log(`Retrieved ${statusData.statuses.length} current statuses for event: ${eventId}, date: ${performanceDate}`);\n            return statusData.statuses;\n        } catch (error) {\n            console.error(\"Error getting current statuses:\", error);\n            return [];\n        }\n    }\n    /**\r\n\t * Log status update for audit trail\r\n\t */ static async logStatusUpdate(eventId, performanceDate, updateLog) {\n        try {\n            // Get existing log\n            const logPath = `events/${eventId}/artist-statuses/${performanceDate}/status-log.json`;\n            const existingLog = await this.readJSON(logPath) || {\n                updates: []\n            };\n            // Add new update\n            existingLog.updates.push(updateLog);\n            existingLog.updated_at = new Date().toISOString();\n            // Keep only last 1000 updates to prevent file from growing too large\n            if (existingLog.updates.length > 1000) {\n                existingLog.updates = existingLog.updates.slice(-1000);\n            }\n            await this.saveJSON(existingLog, logPath);\n            console.log(`Status update logged for artist: ${updateLog.artistId}`);\n        } catch (error) {\n            console.error(\"Error logging status update:\", error);\n        // Don't throw error for logging failures\n        }\n    }\n    /**\r\n\t * Get status update log for a performance date\r\n\t */ static async getStatusUpdateLog(eventId, performanceDate, limit) {\n        try {\n            const logData = await this.readJSON(`events/${eventId}/artist-statuses/${performanceDate}/status-log.json`);\n            if (!logData || !Array.isArray(logData.updates)) {\n                return [];\n            }\n            const updates = logData.updates;\n            return limit ? updates.slice(-limit) : updates;\n        } catch (error) {\n            console.error(\"Error getting status update log:\", error);\n            return [];\n        }\n    }\n    /**\r\n\t * Log conflict resolution for debugging\r\n\t */ static async logConflictResolution(eventId, conflictLog) {\n        try {\n            const timestamp = conflictLog.conflictTimestamp.replace(/[:.]/g, \"-\");\n            const logPath = `events/${eventId}/artist-statuses/conflict-resolution/${timestamp}-conflicts.json`;\n            await this.saveJSON(conflictLog, logPath);\n            console.log(`Conflict resolution logged for artist: ${conflictLog.artistId}`);\n        } catch (error) {\n            console.error(\"Error logging conflict resolution:\", error);\n        // Don't throw error for logging failures\n        }\n    }\n    /**\r\n\t * Batch save multiple artist statuses efficiently\r\n\t */ static async batchSaveStatuses(eventId, performanceDate, statuses, userId) {\n        try {\n            // Save current statuses\n            await this.saveCurrentStatuses(eventId, performanceDate, statuses);\n            // Log each status update\n            const updatePromises = statuses.map((status)=>{\n                const updateLog = {\n                    eventId,\n                    artistId: status.artistId,\n                    newStatus: status.performance_status,\n                    performance_order: status.performance_order,\n                    performance_date: status.performance_date,\n                    timestamp: status.timestamp,\n                    userId: userId || \"system\",\n                    source: \"api\",\n                    version: status.version\n                };\n                return this.logStatusUpdate(eventId, performanceDate, updateLog);\n            });\n            await Promise.all(updatePromises);\n            // Update cache metadata\n            const metadata = {\n                eventId,\n                version: Date.now(),\n                lastSync: new Date().toISOString(),\n                totalStatuses: statuses.length,\n                conflictCount: 0\n            };\n            await this.saveCacheMetadata(eventId, metadata);\n            console.log(`Batch saved ${statuses.length} statuses for event: ${eventId}`);\n        } catch (error) {\n            console.error(\"Error batch saving statuses:\", error);\n            throw new Error(\"Failed to batch save statuses to GCS\");\n        }\n    }\n    /**\r\n\t * Get artist status with timestamp-based conflict resolution\r\n\t */ static async getArtistStatusWithConflictResolution(artistId, eventId, localStatus) {\n        try {\n            // Get current artist data\n            const artistData = await this.getArtistData(artistId);\n            if (!artistData) {\n                return null;\n            }\n            // Convert to cached status format\n            const remoteStatus = {\n                artistId,\n                eventId,\n                performance_status: artistData.performance_status || \"not_started\",\n                performance_order: artistData.performance_order,\n                performance_date: artistData.performance_date || artistData.performanceDate,\n                timestamp: artistData.updatedAt || new Date().toISOString(),\n                version: 1,\n                dirty: false\n            };\n            // If no local status, return remote\n            if (!localStatus) {\n                return remoteStatus;\n            }\n            // Resolve conflicts using timestamps\n            const localTime = new Date(localStatus.timestamp).getTime();\n            const remoteTime = new Date(remoteStatus.timestamp).getTime();\n            if (remoteTime > localTime) {\n                // Remote is newer\n                return remoteStatus;\n            } else if (localTime > remoteTime) {\n                // Local is newer\n                return localStatus;\n            } else {\n                // Same timestamp, use version numbers\n                if (remoteStatus.version > localStatus.version) {\n                    return remoteStatus;\n                } else {\n                    return localStatus;\n                }\n            }\n        } catch (error) {\n            console.error(\"Error getting artist status with conflict resolution:\", error);\n            return localStatus || null;\n        }\n    }\n    /**\r\n\t * Cleanup old status logs and conflict resolution files\r\n\t */ static async cleanupOldStatusData(eventId, daysToKeep = 30) {\n        try {\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n            const cutoffTimestamp = cutoffDate.toISOString();\n            // List all files in the artist-statuses directory\n            const prefix = `events/${eventId}/artist-statuses/`;\n            const files = await this.listFiles(prefix);\n            const deletePromises = files.filter((fileName)=>{\n                // Extract timestamp from filename if possible\n                const timestampMatch = fileName.match(/(\\d{4}-\\d{2}-\\d{2})/);\n                if (timestampMatch) {\n                    return timestampMatch[1] < cutoffTimestamp.substring(0, 10);\n                }\n                return false;\n            }).map((fileName)=>this.deleteFile(fileName));\n            await Promise.all(deletePromises);\n            console.log(`Cleaned up ${deletePromises.length} old status files for event: ${eventId}`);\n        } catch (error) {\n            console.error(\"Error cleaning up old status data:\", error);\n        // Don't throw error for cleanup failures\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GCSService);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-cloud-storage.ts\n");

/***/ }),

/***/ "(rsc)/./lib/service-isolation.ts":
/*!**********************************!*\
  !*** ./lib/service-isolation.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceIsolation: () => (/* binding */ ServiceIsolation)\n/* harmony export */ });\n/* harmony import */ var _build_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build-context */ \"(rsc)/./lib/build-context.ts\");\n/**\r\n * Service isolation utility for build-time vs runtime separation\r\n * Prevents external services from being initialized during static generation\r\n */ \nclass ServiceIsolation {\n    static{\n        this.services = new Map();\n    }\n    /**\r\n\t * Register a service with its configuration\r\n\t */ static registerService(name, config = {}) {\n        const serviceConfig = {\n            name,\n            enabled: true,\n            buildTimeEnabled: false,\n            runtimeEnabled: true,\n            ...config\n        };\n        this.services.set(name, serviceConfig);\n        return serviceConfig;\n    }\n    /**\r\n\t * Check if a service should be enabled in the current context\r\n\t */ static isServiceEnabled(serviceName) {\n        const service = this.services.get(serviceName);\n        if (!service || !service.enabled) {\n            return false;\n        }\n        const isBuilding = _build_context__WEBPACK_IMPORTED_MODULE_0__.BuildContext.isBuilding();\n        if (isBuilding) {\n            return service.buildTimeEnabled;\n        } else {\n            return service.runtimeEnabled;\n        }\n    }\n    /**\r\n\t * Get service configuration\r\n\t */ static getServiceConfig(serviceName) {\n        return this.services.get(serviceName);\n    }\n    /**\r\n\t * List all registered services\r\n\t */ static getAllServices() {\n        return Array.from(this.services.values());\n    }\n    /**\r\n\t * Create a service wrapper that respects build-time isolation\r\n\t */ static createServiceWrapper(serviceName, serviceFactory, mockFactory) {\n        return ()=>{\n            if (this.isServiceEnabled(serviceName)) {\n                return serviceFactory();\n            } else {\n                console.log(`Service '${serviceName}' is disabled in current context (build: ${_build_context__WEBPACK_IMPORTED_MODULE_0__.BuildContext.isBuilding()})`);\n                return mockFactory ? mockFactory() : {};\n            }\n        };\n    }\n    /**\r\n\t * Execute a function only if the service is enabled\r\n\t */ static executeIfEnabled(serviceName, fn, fallback) {\n        if (this.isServiceEnabled(serviceName)) {\n            return fn();\n        } else {\n            console.log(`Skipping execution for service '${serviceName}' (disabled in current context)`);\n            return fallback ? fallback() : undefined;\n        }\n    }\n    /**\r\n\t * Create a mock implementation for build-time use\r\n\t */ static createBuildTimeMock(serviceName, methods) {\n        const mock = {};\n        for (const method of methods){\n            mock[method] = (...args)=>{\n                console.log(`Mock call to ${serviceName}.${String(method)}(${args.length} args) during build`);\n                return Promise.resolve(null);\n            };\n        }\n        return mock;\n    }\n    /**\r\n\t * Initialize service isolation with default configurations\r\n\t */ static initialize() {\n        // Register Google Cloud Storage service\n        this.registerService(\"google-cloud-storage\", {\n            buildTimeEnabled: false,\n            runtimeEnabled: true\n        });\n        // Register WebSocket service\n        this.registerService(\"websocket\", {\n            buildTimeEnabled: false,\n            runtimeEnabled: true\n        });\n        // Register external API services\n        this.registerService(\"external-apis\", {\n            buildTimeEnabled: false,\n            runtimeEnabled: true\n        });\n        // Register file system operations (allowed during build)\n        this.registerService(\"file-system\", {\n            buildTimeEnabled: true,\n            runtimeEnabled: true\n        });\n        console.log(`Service isolation initialized with ${this.services.size} services`);\n    }\n    /**\r\n\t * Get environment information for debugging\r\n\t */ static getEnvironmentInfo() {\n        return {\n            buildContext: _build_context__WEBPACK_IMPORTED_MODULE_0__.BuildContext.getEnvironmentInfo(),\n            services: Object.fromEntries(Array.from(this.services.entries()).map(([name, config])=>[\n                    name,\n                    {\n                        ...config,\n                        currentlyEnabled: this.isServiceEnabled(name)\n                    }\n                ]))\n        };\n    }\n}\n// Initialize service isolation on module load\nServiceIsolation.initialize();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZS1pc29sYXRpb24udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FFOEM7QUFTeEMsTUFBTUM7O2FBQ0dDLFdBQVcsSUFBSUM7O0lBRTlCOztFQUVDLEdBQ0QsT0FBT0MsZ0JBQWdCQyxJQUFZLEVBQUVDLFNBQWlDLENBQUMsQ0FBQyxFQUFFO1FBQ3pFLE1BQU1DLGdCQUErQjtZQUNwQ0Y7WUFDQUcsU0FBUztZQUNUQyxrQkFBa0I7WUFDbEJDLGdCQUFnQjtZQUNoQixHQUFHSixNQUFNO1FBQ1Y7UUFFQSxJQUFJLENBQUNKLFFBQVEsQ0FBQ1MsR0FBRyxDQUFDTixNQUFNRTtRQUN4QixPQUFPQTtJQUNSO0lBRUE7O0VBRUMsR0FDRCxPQUFPSyxpQkFBaUJDLFdBQW1CLEVBQVc7UUFDckQsTUFBTUMsVUFBVSxJQUFJLENBQUNaLFFBQVEsQ0FBQ2EsR0FBRyxDQUFDRjtRQUNsQyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0EsUUFBUU4sT0FBTyxFQUFFO1lBQ2pDLE9BQU87UUFDUjtRQUVBLE1BQU1RLGFBQWFoQix3REFBWUEsQ0FBQ2dCLFVBQVU7UUFFMUMsSUFBSUEsWUFBWTtZQUNmLE9BQU9GLFFBQVFMLGdCQUFnQjtRQUNoQyxPQUFPO1lBQ04sT0FBT0ssUUFBUUosY0FBYztRQUM5QjtJQUNEO0lBRUE7O0VBRUMsR0FDRCxPQUFPTyxpQkFBaUJKLFdBQW1CLEVBQTZCO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDWCxRQUFRLENBQUNhLEdBQUcsQ0FBQ0Y7SUFDMUI7SUFFQTs7RUFFQyxHQUNELE9BQU9LLGlCQUFrQztRQUN4QyxPQUFPQyxNQUFNQyxJQUFJLENBQUMsSUFBSSxDQUFDbEIsUUFBUSxDQUFDbUIsTUFBTTtJQUN2QztJQUVBOztFQUVDLEdBQ0QsT0FBT0MscUJBQ05ULFdBQW1CLEVBQ25CVSxjQUF1QixFQUN2QkMsV0FBOEIsRUFDUDtRQUN2QixPQUFPO1lBQ04sSUFBSSxJQUFJLENBQUNaLGdCQUFnQixDQUFDQyxjQUFjO2dCQUN2QyxPQUFPVTtZQUNSLE9BQU87Z0JBQ05FLFFBQVFDLEdBQUcsQ0FDVixDQUFDLFNBQVMsRUFBRWIsWUFBWSx5Q0FBeUMsRUFBRWIsd0RBQVlBLENBQUNnQixVQUFVLEdBQUcsQ0FBQyxDQUFDO2dCQUVoRyxPQUFPUSxjQUFjQSxnQkFBaUIsQ0FBQztZQUN4QztRQUNEO0lBQ0Q7SUFFQTs7RUFFQyxHQUNELE9BQU9HLGlCQUNOZCxXQUFtQixFQUNuQmUsRUFBVyxFQUNYQyxRQUFrQixFQUNGO1FBQ2hCLElBQUksSUFBSSxDQUFDakIsZ0JBQWdCLENBQUNDLGNBQWM7WUFDdkMsT0FBT2U7UUFDUixPQUFPO1lBQ05ILFFBQVFDLEdBQUcsQ0FDVixDQUFDLGdDQUFnQyxFQUFFYixZQUFZLCtCQUErQixDQUFDO1lBRWhGLE9BQU9nQixXQUFXQSxhQUFhQztRQUNoQztJQUNEO0lBRUE7O0VBRUMsR0FDRCxPQUFPQyxvQkFDTmxCLFdBQW1CLEVBQ25CbUIsT0FBb0IsRUFDUDtRQUNiLE1BQU1DLE9BQU8sQ0FBQztRQUVkLEtBQUssTUFBTUMsVUFBVUYsUUFBUztZQUM1QkMsSUFBWSxDQUFDQyxPQUFPLEdBQUcsQ0FBQyxHQUFHQztnQkFDM0JWLFFBQVFDLEdBQUcsQ0FDVixDQUFDLGFBQWEsRUFBRWIsWUFBWSxDQUFDLEVBQUV1QixPQUFPRixRQUFRLENBQUMsRUFDOUNDLEtBQUtFLE1BQU0sQ0FDWCxtQkFBbUIsQ0FBQztnQkFFdEIsT0FBT0MsUUFBUUMsT0FBTyxDQUFDO1lBQ3hCO1FBQ0Q7UUFFQSxPQUFPTjtJQUNSO0lBRUE7O0VBRUMsR0FDRCxPQUFPTyxhQUFhO1FBQ25CLHdDQUF3QztRQUN4QyxJQUFJLENBQUNwQyxlQUFlLENBQUMsd0JBQXdCO1lBQzVDSyxrQkFBa0I7WUFDbEJDLGdCQUFnQjtRQUNqQjtRQUVBLDZCQUE2QjtRQUM3QixJQUFJLENBQUNOLGVBQWUsQ0FBQyxhQUFhO1lBQ2pDSyxrQkFBa0I7WUFDbEJDLGdCQUFnQjtRQUNqQjtRQUVBLGlDQUFpQztRQUNqQyxJQUFJLENBQUNOLGVBQWUsQ0FBQyxpQkFBaUI7WUFDckNLLGtCQUFrQjtZQUNsQkMsZ0JBQWdCO1FBQ2pCO1FBRUEseURBQXlEO1FBQ3pELElBQUksQ0FBQ04sZUFBZSxDQUFDLGVBQWU7WUFDbkNLLGtCQUFrQjtZQUNsQkMsZ0JBQWdCO1FBQ2pCO1FBRUFlLFFBQVFDLEdBQUcsQ0FDVixDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQ3hCLFFBQVEsQ0FBQ3VDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFFckU7SUFFQTs7RUFFQyxHQUNELE9BQU9DLHFCQUFxQjtRQUMzQixPQUFPO1lBQ05DLGNBQWMzQyx3REFBWUEsQ0FBQzBDLGtCQUFrQjtZQUM3Q3hDLFVBQVUwQyxPQUFPQyxXQUFXLENBQzNCMUIsTUFBTUMsSUFBSSxDQUFDLElBQUksQ0FBQ2xCLFFBQVEsQ0FBQzRDLE9BQU8sSUFBSUMsR0FBRyxDQUFDLENBQUMsQ0FBQzFDLE1BQU1DLE9BQU8sR0FBSztvQkFDM0REO29CQUNBO3dCQUNDLEdBQUdDLE1BQU07d0JBQ1QwQyxrQkFBa0IsSUFBSSxDQUFDcEMsZ0JBQWdCLENBQUNQO29CQUN6QztpQkFDQTtRQUVIO0lBQ0Q7QUFDRDtBQUVBLDhDQUE4QztBQUM5Q0osaUJBQWlCdUMsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9saWIvc2VydmljZS1pc29sYXRpb24udHM/YTFiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogU2VydmljZSBpc29sYXRpb24gdXRpbGl0eSBmb3IgYnVpbGQtdGltZSB2cyBydW50aW1lIHNlcGFyYXRpb25cclxuICogUHJldmVudHMgZXh0ZXJuYWwgc2VydmljZXMgZnJvbSBiZWluZyBpbml0aWFsaXplZCBkdXJpbmcgc3RhdGljIGdlbmVyYXRpb25cclxuICovXHJcblxyXG5pbXBvcnQgeyBCdWlsZENvbnRleHQgfSBmcm9tIFwiLi9idWlsZC1jb250ZXh0XCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VDb25maWcge1xyXG5cdG5hbWU6IHN0cmluZztcclxuXHRlbmFibGVkOiBib29sZWFuO1xyXG5cdGJ1aWxkVGltZUVuYWJsZWQ6IGJvb2xlYW47XHJcblx0cnVudGltZUVuYWJsZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlSXNvbGF0aW9uIHtcclxuXHRwcml2YXRlIHN0YXRpYyBzZXJ2aWNlcyA9IG5ldyBNYXA8c3RyaW5nLCBTZXJ2aWNlQ29uZmlnPigpO1xyXG5cclxuXHQvKipcclxuXHQgKiBSZWdpc3RlciBhIHNlcnZpY2Ugd2l0aCBpdHMgY29uZmlndXJhdGlvblxyXG5cdCAqL1xyXG5cdHN0YXRpYyByZWdpc3RlclNlcnZpY2UobmFtZTogc3RyaW5nLCBjb25maWc6IFBhcnRpYWw8U2VydmljZUNvbmZpZz4gPSB7fSkge1xyXG5cdFx0Y29uc3Qgc2VydmljZUNvbmZpZzogU2VydmljZUNvbmZpZyA9IHtcclxuXHRcdFx0bmFtZSxcclxuXHRcdFx0ZW5hYmxlZDogdHJ1ZSxcclxuXHRcdFx0YnVpbGRUaW1lRW5hYmxlZDogZmFsc2UsXHJcblx0XHRcdHJ1bnRpbWVFbmFibGVkOiB0cnVlLFxyXG5cdFx0XHQuLi5jb25maWcsXHJcblx0XHR9O1xyXG5cclxuXHRcdHRoaXMuc2VydmljZXMuc2V0KG5hbWUsIHNlcnZpY2VDb25maWcpO1xyXG5cdFx0cmV0dXJuIHNlcnZpY2VDb25maWc7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDaGVjayBpZiBhIHNlcnZpY2Ugc2hvdWxkIGJlIGVuYWJsZWQgaW4gdGhlIGN1cnJlbnQgY29udGV4dFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBpc1NlcnZpY2VFbmFibGVkKHNlcnZpY2VOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuXHRcdGNvbnN0IHNlcnZpY2UgPSB0aGlzLnNlcnZpY2VzLmdldChzZXJ2aWNlTmFtZSk7XHJcblx0XHRpZiAoIXNlcnZpY2UgfHwgIXNlcnZpY2UuZW5hYmxlZCkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgaXNCdWlsZGluZyA9IEJ1aWxkQ29udGV4dC5pc0J1aWxkaW5nKCk7XHJcblxyXG5cdFx0aWYgKGlzQnVpbGRpbmcpIHtcclxuXHRcdFx0cmV0dXJuIHNlcnZpY2UuYnVpbGRUaW1lRW5hYmxlZDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBzZXJ2aWNlLnJ1bnRpbWVFbmFibGVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHNlcnZpY2UgY29uZmlndXJhdGlvblxyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRTZXJ2aWNlQ29uZmlnKHNlcnZpY2VOYW1lOiBzdHJpbmcpOiBTZXJ2aWNlQ29uZmlnIHwgdW5kZWZpbmVkIHtcclxuXHRcdHJldHVybiB0aGlzLnNlcnZpY2VzLmdldChzZXJ2aWNlTmFtZSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBMaXN0IGFsbCByZWdpc3RlcmVkIHNlcnZpY2VzXHJcblx0ICovXHJcblx0c3RhdGljIGdldEFsbFNlcnZpY2VzKCk6IFNlcnZpY2VDb25maWdbXSB7XHJcblx0XHRyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnNlcnZpY2VzLnZhbHVlcygpKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZSBhIHNlcnZpY2Ugd3JhcHBlciB0aGF0IHJlc3BlY3RzIGJ1aWxkLXRpbWUgaXNvbGF0aW9uXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZVNlcnZpY2VXcmFwcGVyPFQ+KFxyXG5cdFx0c2VydmljZU5hbWU6IHN0cmluZyxcclxuXHRcdHNlcnZpY2VGYWN0b3J5OiAoKSA9PiBULFxyXG5cdFx0bW9ja0ZhY3Rvcnk/OiAoKSA9PiBQYXJ0aWFsPFQ+XHJcblx0KTogKCkgPT4gVCB8IFBhcnRpYWw8VD4ge1xyXG5cdFx0cmV0dXJuICgpID0+IHtcclxuXHRcdFx0aWYgKHRoaXMuaXNTZXJ2aWNlRW5hYmxlZChzZXJ2aWNlTmFtZSkpIHtcclxuXHRcdFx0XHRyZXR1cm4gc2VydmljZUZhY3RvcnkoKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcclxuXHRcdFx0XHRcdGBTZXJ2aWNlICcke3NlcnZpY2VOYW1lfScgaXMgZGlzYWJsZWQgaW4gY3VycmVudCBjb250ZXh0IChidWlsZDogJHtCdWlsZENvbnRleHQuaXNCdWlsZGluZygpfSlgXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRyZXR1cm4gbW9ja0ZhY3RvcnkgPyBtb2NrRmFjdG9yeSgpIDogKHt9IGFzIFQpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXhlY3V0ZSBhIGZ1bmN0aW9uIG9ubHkgaWYgdGhlIHNlcnZpY2UgaXMgZW5hYmxlZFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBleGVjdXRlSWZFbmFibGVkPFQ+KFxyXG5cdFx0c2VydmljZU5hbWU6IHN0cmluZyxcclxuXHRcdGZuOiAoKSA9PiBULFxyXG5cdFx0ZmFsbGJhY2s/OiAoKSA9PiBUXHJcblx0KTogVCB8IHVuZGVmaW5lZCB7XHJcblx0XHRpZiAodGhpcy5pc1NlcnZpY2VFbmFibGVkKHNlcnZpY2VOYW1lKSkge1xyXG5cdFx0XHRyZXR1cm4gZm4oKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKFxyXG5cdFx0XHRcdGBTa2lwcGluZyBleGVjdXRpb24gZm9yIHNlcnZpY2UgJyR7c2VydmljZU5hbWV9JyAoZGlzYWJsZWQgaW4gY3VycmVudCBjb250ZXh0KWBcclxuXHRcdFx0KTtcclxuXHRcdFx0cmV0dXJuIGZhbGxiYWNrID8gZmFsbGJhY2soKSA6IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZSBhIG1vY2sgaW1wbGVtZW50YXRpb24gZm9yIGJ1aWxkLXRpbWUgdXNlXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZUJ1aWxkVGltZU1vY2s8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4+KFxyXG5cdFx0c2VydmljZU5hbWU6IHN0cmluZyxcclxuXHRcdG1ldGhvZHM6IChrZXlvZiBUKVtdXHJcblx0KTogUGFydGlhbDxUPiB7XHJcblx0XHRjb25zdCBtb2NrID0ge30gYXMgUGFydGlhbDxUPjtcclxuXHJcblx0XHRmb3IgKGNvbnN0IG1ldGhvZCBvZiBtZXRob2RzKSB7XHJcblx0XHRcdChtb2NrIGFzIGFueSlbbWV0aG9kXSA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFxyXG5cdFx0XHRcdFx0YE1vY2sgY2FsbCB0byAke3NlcnZpY2VOYW1lfS4ke1N0cmluZyhtZXRob2QpfSgke1xyXG5cdFx0XHRcdFx0XHRhcmdzLmxlbmd0aFxyXG5cdFx0XHRcdFx0fSBhcmdzKSBkdXJpbmcgYnVpbGRgXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtb2NrO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZSBzZXJ2aWNlIGlzb2xhdGlvbiB3aXRoIGRlZmF1bHQgY29uZmlndXJhdGlvbnNcclxuXHQgKi9cclxuXHRzdGF0aWMgaW5pdGlhbGl6ZSgpIHtcclxuXHRcdC8vIFJlZ2lzdGVyIEdvb2dsZSBDbG91ZCBTdG9yYWdlIHNlcnZpY2VcclxuXHRcdHRoaXMucmVnaXN0ZXJTZXJ2aWNlKFwiZ29vZ2xlLWNsb3VkLXN0b3JhZ2VcIiwge1xyXG5cdFx0XHRidWlsZFRpbWVFbmFibGVkOiBmYWxzZSxcclxuXHRcdFx0cnVudGltZUVuYWJsZWQ6IHRydWUsXHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBSZWdpc3RlciBXZWJTb2NrZXQgc2VydmljZVxyXG5cdFx0dGhpcy5yZWdpc3RlclNlcnZpY2UoXCJ3ZWJzb2NrZXRcIiwge1xyXG5cdFx0XHRidWlsZFRpbWVFbmFibGVkOiBmYWxzZSxcclxuXHRcdFx0cnVudGltZUVuYWJsZWQ6IHRydWUsXHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBSZWdpc3RlciBleHRlcm5hbCBBUEkgc2VydmljZXNcclxuXHRcdHRoaXMucmVnaXN0ZXJTZXJ2aWNlKFwiZXh0ZXJuYWwtYXBpc1wiLCB7XHJcblx0XHRcdGJ1aWxkVGltZUVuYWJsZWQ6IGZhbHNlLFxyXG5cdFx0XHRydW50aW1lRW5hYmxlZDogdHJ1ZSxcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIFJlZ2lzdGVyIGZpbGUgc3lzdGVtIG9wZXJhdGlvbnMgKGFsbG93ZWQgZHVyaW5nIGJ1aWxkKVxyXG5cdFx0dGhpcy5yZWdpc3RlclNlcnZpY2UoXCJmaWxlLXN5c3RlbVwiLCB7XHJcblx0XHRcdGJ1aWxkVGltZUVuYWJsZWQ6IHRydWUsXHJcblx0XHRcdHJ1bnRpbWVFbmFibGVkOiB0cnVlLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc29sZS5sb2coXHJcblx0XHRcdGBTZXJ2aWNlIGlzb2xhdGlvbiBpbml0aWFsaXplZCB3aXRoICR7dGhpcy5zZXJ2aWNlcy5zaXplfSBzZXJ2aWNlc2BcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgZW52aXJvbm1lbnQgaW5mb3JtYXRpb24gZm9yIGRlYnVnZ2luZ1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRFbnZpcm9ubWVudEluZm8oKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRidWlsZENvbnRleHQ6IEJ1aWxkQ29udGV4dC5nZXRFbnZpcm9ubWVudEluZm8oKSxcclxuXHRcdFx0c2VydmljZXM6IE9iamVjdC5mcm9tRW50cmllcyhcclxuXHRcdFx0XHRBcnJheS5mcm9tKHRoaXMuc2VydmljZXMuZW50cmllcygpKS5tYXAoKFtuYW1lLCBjb25maWddKSA9PiBbXHJcblx0XHRcdFx0XHRuYW1lLFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHQuLi5jb25maWcsXHJcblx0XHRcdFx0XHRcdGN1cnJlbnRseUVuYWJsZWQ6IHRoaXMuaXNTZXJ2aWNlRW5hYmxlZChuYW1lKSxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XSlcclxuXHRcdFx0KSxcclxuXHRcdH07XHJcblx0fVxyXG59XHJcblxyXG4vLyBJbml0aWFsaXplIHNlcnZpY2UgaXNvbGF0aW9uIG9uIG1vZHVsZSBsb2FkXHJcblNlcnZpY2VJc29sYXRpb24uaW5pdGlhbGl6ZSgpO1xyXG4iXSwibmFtZXMiOlsiQnVpbGRDb250ZXh0IiwiU2VydmljZUlzb2xhdGlvbiIsInNlcnZpY2VzIiwiTWFwIiwicmVnaXN0ZXJTZXJ2aWNlIiwibmFtZSIsImNvbmZpZyIsInNlcnZpY2VDb25maWciLCJlbmFibGVkIiwiYnVpbGRUaW1lRW5hYmxlZCIsInJ1bnRpbWVFbmFibGVkIiwic2V0IiwiaXNTZXJ2aWNlRW5hYmxlZCIsInNlcnZpY2VOYW1lIiwic2VydmljZSIsImdldCIsImlzQnVpbGRpbmciLCJnZXRTZXJ2aWNlQ29uZmlnIiwiZ2V0QWxsU2VydmljZXMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJjcmVhdGVTZXJ2aWNlV3JhcHBlciIsInNlcnZpY2VGYWN0b3J5IiwibW9ja0ZhY3RvcnkiLCJjb25zb2xlIiwibG9nIiwiZXhlY3V0ZUlmRW5hYmxlZCIsImZuIiwiZmFsbGJhY2siLCJ1bmRlZmluZWQiLCJjcmVhdGVCdWlsZFRpbWVNb2NrIiwibWV0aG9kcyIsIm1vY2siLCJtZXRob2QiLCJhcmdzIiwiU3RyaW5nIiwibGVuZ3RoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJpbml0aWFsaXplIiwic2l6ZSIsImdldEVudmlyb25tZW50SW5mbyIsImJ1aWxkQ29udGV4dCIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsIm1hcCIsImN1cnJlbnRseUVuYWJsZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/service-isolation.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/semver","vendor-chunks/jsonwebtoken","vendor-chunks/lodash.includes","vendor-chunks/lodash.once","vendor-chunks/lodash.isinteger","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/lodash.isplainobject","vendor-chunks/ms","vendor-chunks/lodash.isstring","vendor-chunks/lodash.isnumber","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/buffer-equal-constant-time"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fme%2Froute&page=%2Fapi%2Fauth%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5COneDrive%5CDesktop%5CFAME%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5COneDrive%5CDesktop%5CFAME&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();