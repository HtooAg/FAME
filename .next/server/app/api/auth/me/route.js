/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/me/route";
exports.ids = ["app/api/auth/me/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "?d272":
/*!********************************!*\
  !*** supports-color (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fme%2Froute&page=%2Fapi%2Fauth%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cfame-event-manager%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cfame-event-manager&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fme%2Froute&page=%2Fapi%2Fauth%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cfame-event-manager%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cfame-event-manager&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_ASUS_Downloads_fame_event_manager_app_api_auth_me_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/auth/me/route.ts */ \"(rsc)/./app/api/auth/me/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/me/route\",\n        pathname: \"/api/auth/me\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/me/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\fame-event-manager\\\\app\\\\api\\\\auth\\\\me\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ASUS_Downloads_fame_event_manager_app_api_auth_me_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/auth/me/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGbWUlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmF1dGglMkZtZSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmF1dGglMkZtZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDRG93bmxvYWRzJTVDZmFtZS1ldmVudC1tYW5hZ2VyJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDRG93bmxvYWRzJTVDZmFtZS1ldmVudC1tYW5hZ2VyJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM0QjtBQUN6RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvP2IxMzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcQVNVU1xcXFxEb3dubG9hZHNcXFxcZmFtZS1ldmVudC1tYW5hZ2VyXFxcXGFwcFxcXFxhcGlcXFxcYXV0aFxcXFxtZVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXV0aC9tZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2F1dGgvbWVcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2F1dGgvbWUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxBU1VTXFxcXERvd25sb2Fkc1xcXFxmYW1lLWV2ZW50LW1hbmFnZXJcXFxcYXBwXFxcXGFwaVxcXFxhdXRoXFxcXG1lXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hdXRoL21lL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fme%2Froute&page=%2Fapi%2Fauth%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cfame-event-manager%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cfame-event-manager&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/auth/me/route.ts":
/*!**********************************!*\
  !*** ./app/api/auth/me/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_gcs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/gcs */ \"(rsc)/./lib/gcs.ts\");\n\n\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev-secret-do-not-use-in-prod\";\nasync function GET(request) {\n    try {\n        const token = request.cookies.get(\"auth-token\")?.value;\n        if (!token) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"No token\"\n        }, {\n            status: 401\n        });\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        // First check users index (for approved users)\n        const users = await (0,_lib_gcs__WEBPACK_IMPORTED_MODULE_2__.readJsonFile)(_lib_gcs__WEBPACK_IMPORTED_MODULE_2__.paths.usersIndex, []);\n        let user = users.find((u)=>u.id === decoded.userId);\n        console.log(\"User lookup result:\", {\n            userId: decoded.userId,\n            found: !!user\n        }); // Debug log\n        // Special handling for super admin\n        if (decoded.role === \"super_admin\") {\n            const adminUser = users.find((u)=>u.role === \"super_admin\" && u.id === decoded.userId);\n            if (adminUser) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    id: adminUser.id,\n                    email: adminUser.email,\n                    name: adminUser.name,\n                    role: \"super_admin\",\n                    accountStatus: \"active\",\n                    subscriptionStatus: \"active\"\n                });\n            }\n        }\n        // If not found in users index, check registrations (for pending users)\n        if (!user) {\n            const registrations = await (0,_lib_gcs__WEBPACK_IMPORTED_MODULE_2__.readJsonDirectory)(_lib_gcs__WEBPACK_IMPORTED_MODULE_2__.paths.registrationStageManagerDir);\n            user = registrations.find((r)=>r.id === decoded.userId);\n            console.log(\"Registration lookup result:\", {\n                userId: decoded.userId,\n                found: !!user\n            }); // Debug log\n        }\n        if (!user) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"User not found\"\n        }, {\n            status: 404\n        });\n        // Check account status (super_admin bypasses most checks)\n        if (user.role !== \"super_admin\") {\n            if (user.accountStatus === \"suspended\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Account suspended\",\n                    accountStatus: \"suspended\"\n                }, {\n                    status: 403\n                });\n            }\n            if (user.accountStatus === \"deactivated\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Account deactivated\",\n                    accountStatus: \"deactivated\"\n                }, {\n                    status: 403\n                });\n            }\n            if (user.accountStatus === \"rejected\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Account rejected\",\n                    accountStatus: \"rejected\"\n                }, {\n                    status: 403\n                });\n            }\n            // Allow pending users to get their data but they'll be redirected appropriately\n            if (user.accountStatus === \"pending\") {\n            // Return user data but the frontend will handle redirection\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            eventId: user.eventId,\n            accountStatus: user.accountStatus,\n            subscriptionStatus: user.subscriptionStatus,\n            subscriptionEndDate: user.subscriptionEndDate\n        });\n    } catch (error) {\n        console.error(\"Me error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Invalid token\"\n        }, {\n            status: 401\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/me/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/gcs.ts":
/*!********************!*\
  !*** ./lib/gcs.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GCSManager: () => (/* binding */ GCSManager),\n/* harmony export */   createArtistDataStructure: () => (/* binding */ createArtistDataStructure),\n/* harmony export */   deleteFromArrayFile: () => (/* binding */ deleteFromArrayFile),\n/* harmony export */   gcsManager: () => (/* binding */ gcsManager),\n/* harmony export */   paths: () => (/* binding */ paths),\n/* harmony export */   readJsonDirectory: () => (/* binding */ readJsonDirectory),\n/* harmony export */   readJsonFile: () => (/* binding */ readJsonFile),\n/* harmony export */   upsertArrayFile: () => (/* binding */ upsertArrayFile),\n/* harmony export */   writeJsonFile: () => (/* binding */ writeJsonFile)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-cloud-storage */ \"(rsc)/./lib/google-cloud-storage.ts\");\n// Google Cloud Storage utility functions\n// Note: This is a simplified implementation for demonstration\n// In production, you would use the actual Google Cloud Storage SDK\n\n// File paths configuration\nconst paths = {\n    usersIndex: \"users/index.json\",\n    registrationStageManagerDir: \"registrations/stage-managers\",\n    registrationArtistDir: \"registrations/artists\",\n    eventsIndex: \"events/index.json\",\n    stageManagersIndex: \"stage-managers/index.json\",\n    superAdminsIndex: \"super-admins/index.json\",\n    globalArtistsIndex: \"artists/index.json\",\n    stageManagerCounter: \"counters/stage-manager.json\",\n    userByRole: (role, id)=>`users/${role}/${id}.json`,\n    registrationStageManagerFile: (name, id)=>`registrations/stage-managers/${name}-${id}.json`,\n    registrationArtistFile: (name, id)=>`registrations/artists/${name}-${id}.json`,\n    eventFile: (eventId)=>`events/${eventId}.json`,\n    artistFile: (artistId)=>`artists/${artistId}.json`,\n    artistsIndex: (eventId)=>`events/${eventId}/artists/index.json`,\n    stageManagerFile: (stageManagerId)=>`stage-managers/${stageManagerId}.json`\n};\nclass GCSManager {\n    constructor(bucketName = \"artist-event-storage\"){\n        this.bucketName = bucketName;\n    }\n    /**\n\t * Upload a file to Google Cloud Storage\n\t */ async uploadFile(file, folder, artistId) {\n        try {\n            // Generate unique filename\n            const timestamp = Date.now();\n            const randomId = Math.random().toString(36).substring(2, 9);\n            const extension = file.name.split(\".\").pop();\n            const filename = `${timestamp}_${randomId}.${extension}`;\n            // Convert File to Buffer\n            const arrayBuffer = await file.arrayBuffer();\n            const buffer = Buffer.from(arrayBuffer);\n            // Upload to Google Cloud Storage\n            const result = await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].uploadFile(buffer, filename, `${folder}/${artistId}`, file.type);\n            return {\n                url: result.url,\n                filename: result.filename,\n                size: file.size,\n                contentType: file.type\n            };\n        } catch (error) {\n            console.error(\"Error uploading file to Google Cloud Storage:\", error);\n            throw new Error(\"Failed to upload file to Google Cloud Storage\");\n        }\n    }\n    /**\n\t * Upload multiple files\n\t */ async uploadFiles(files, folder, artistId) {\n        const uploadPromises = files.map((file)=>this.uploadFile(file, folder, artistId));\n        return Promise.all(uploadPromises);\n    }\n    /**\n\t * Delete a file from Google Cloud Storage\n\t */ async deleteFile(filename) {\n        try {\n            await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteFile(filename);\n        } catch (error) {\n            console.error(\"Error deleting file from Google Cloud Storage:\", error);\n            throw new Error(\"Failed to delete file from Google Cloud Storage\");\n        }\n    }\n    /**\n\t * Get a signed URL for file access\n\t */ async getSignedUrl(filename, expiresIn = 3600) {\n        try {\n            return await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getSignedUrl(filename, expiresIn);\n        } catch (error) {\n            console.error(\"Error generating signed URL from Google Cloud Storage:\", error);\n            throw new Error(\"Failed to generate signed URL from Google Cloud Storage\");\n        }\n    }\n}\n// Export a default instance\nconst gcsManager = new GCSManager();\nasync function readJsonFile(path, defaultValue = null) {\n    try {\n        const data = await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].readJSON(path);\n        return data !== null ? data : defaultValue;\n    } catch (error) {\n        console.error(\"Error reading JSON file from Google Cloud Storage:\", error);\n        return defaultValue;\n    }\n}\n/**\n * Write JSON file to Google Cloud Storage\n */ async function writeJsonFile(path, data) {\n    try {\n        await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].saveJSON(data, path);\n    } catch (error) {\n        console.error(\"Error writing JSON file to Google Cloud Storage:\", error);\n        throw new Error(\"Failed to write JSON file to Google Cloud Storage\");\n    }\n}\n/**\n * Read all JSON files from a directory in Google Cloud Storage\n */ async function readJsonDirectory(dirPath) {\n    try {\n        const files = await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].listFiles(dirPath);\n        const jsonFiles = files.filter((file)=>file.endsWith(\".json\"));\n        const results = [];\n        for (const file of jsonFiles){\n            const data = await _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].readJSON(file);\n            if (data !== null) {\n                results.push(data);\n            }\n        }\n        return results;\n    } catch (error) {\n        console.error(\"Error reading JSON directory from Google Cloud Storage:\", error);\n        return [];\n    }\n}\n/**\n * Upsert (insert or update) an item in an array file\n */ async function upsertArrayFile(path, item, matchField = \"id\") {\n    try {\n        const existingData = await readJsonFile(path, []);\n        const array = existingData || [];\n        const existingIndex = array.findIndex((existing)=>existing[matchField] === item[matchField]);\n        if (existingIndex >= 0) {\n            // Update existing item\n            array[existingIndex] = {\n                ...array[existingIndex],\n                ...item\n            };\n        } else {\n            // Add new item\n            array.push(item);\n        }\n        await writeJsonFile(path, array);\n    } catch (error) {\n        console.error(\"Error upserting array file:\", error);\n        throw new Error(\"Failed to upsert array file\");\n    }\n}\n/**\n * Delete an item from an array file\n */ async function deleteFromArrayFile(path, itemId, matchField = \"id\") {\n    try {\n        const existingData = await readJsonFile(path, []);\n        const array = existingData || [];\n        const filteredArray = array.filter((item)=>item[matchField] !== itemId);\n        await writeJsonFile(path, filteredArray);\n    } catch (error) {\n        console.error(\"Error deleting from array file:\", error);\n        throw new Error(\"Failed to delete from array file\");\n    }\n}\n// Helper function to organize artist data in GCS-like structure\nfunction createArtistDataStructure(artistData) {\n    const artistId = artistData.id;\n    const eventId = artistData.eventId;\n    return {\n        // Main artist data\n        profile: {\n            path: `artists/${artistId}/profile.json`,\n            data: {\n                id: artistData.id,\n                artistName: artistData.artistName,\n                realName: artistData.realName,\n                email: artistData.email,\n                phone: artistData.phone,\n                style: artistData.style,\n                performanceType: artistData.performanceType,\n                performanceDuration: artistData.performanceDuration,\n                biography: artistData.biography,\n                createdAt: artistData.createdAt,\n                status: artistData.status\n            }\n        },\n        // Technical specifications\n        technical: {\n            path: `artists/${artistId}/technical.json`,\n            data: {\n                costumeColor: artistData.costumeColor,\n                customCostumeColor: artistData.customCostumeColor,\n                lightColorSingle: artistData.lightColorSingle,\n                lightColorTwo: artistData.lightColorTwo,\n                lightColorThree: artistData.lightColorThree,\n                lightRequests: artistData.lightRequests,\n                stagePositionStart: artistData.stagePositionStart,\n                stagePositionEnd: artistData.stagePositionEnd,\n                customStagePosition: artistData.customStagePosition\n            }\n        },\n        // Social media and links\n        social: {\n            path: `artists/${artistId}/social.json`,\n            data: {\n                socialMedia: artistData.socialMedia,\n                showLink: artistData.showLink\n            }\n        },\n        // Notes and communications\n        notes: {\n            path: `artists/${artistId}/notes.json`,\n            data: {\n                mcNotes: artistData.mcNotes,\n                stageManagerNotes: artistData.stageManagerNotes,\n                specialRequirements: artistData.specialRequirements\n            }\n        },\n        // Music tracks metadata\n        music: {\n            path: `artists/${artistId}/music.json`,\n            data: {\n                tracks: artistData.musicTracks?.map((track)=>({\n                        song_title: track.song_title,\n                        duration: track.duration,\n                        notes: track.notes,\n                        is_main_track: track.is_main_track,\n                        tempo: track.tempo,\n                        file_path: `artists/${artistId}/music/${track.song_title.replace(/[^a-zA-Z0-9]/g, \"_\")}.mp3`\n                    })) || []\n            }\n        },\n        // Gallery metadata\n        gallery: {\n            path: `artists/${artistId}/gallery.json`,\n            data: {\n                files: artistData.galleryFiles?.map((file, index)=>({\n                        name: file.name,\n                        type: file.type,\n                        file_path: `artists/${artistId}/gallery/${index}_${file.name}`\n                    })) || []\n            }\n        },\n        // Event association\n        event: {\n            path: `events/${eventId}/artists/${artistId}.json`,\n            data: {\n                artistId: artistData.id,\n                artistName: artistData.artistName,\n                eventId: artistData.eventId,\n                eventName: artistData.eventName,\n                status: artistData.status,\n                registrationDate: artistData.createdAt\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/gcs.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-cloud-storage.ts":
/*!*************************************!*\
  !*** ./lib/google-cloud-storage.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GCSService: () => (/* binding */ GCSService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/storage */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/index.js\");\n\n// Initialize Google Cloud Storage\nlet storage = null;\nlet bucket = null;\nconst bucketName = process.env.GOOGLE_CLOUD_BUCKET_NAME || \"fame-event-data\";\n// Initialize Google Cloud Storage\ntry {\n    // Try different authentication methods\n    if (process.env.GOOGLE_CLOUD_PROJECT_ID) {\n        const storageConfig = {\n            projectId: process.env.GOOGLE_CLOUD_PROJECT_ID\n        };\n        // Use key file if provided\n        if (process.env.GOOGLE_CLOUD_KEY_FILE) {\n            storageConfig.keyFilename = process.env.GOOGLE_CLOUD_KEY_FILE;\n        } else if (process.env.GOOGLE_CLOUD_CREDENTIALS) {\n            storageConfig.credentials = JSON.parse(process.env.GOOGLE_CLOUD_CREDENTIALS);\n        }\n        storage = new _google_cloud_storage__WEBPACK_IMPORTED_MODULE_0__.Storage(storageConfig);\n        bucket = storage.bucket(bucketName);\n        console.log(`Google Cloud Storage initialized with bucket: ${bucketName}`);\n    } else {\n        console.error(\"Google Cloud Storage not configured: Missing GOOGLE_CLOUD_PROJECT_ID\");\n        throw new Error(\"Google Cloud Storage configuration missing\");\n    }\n} catch (error) {\n    console.error(\"Failed to initialize Google Cloud Storage:\", error);\n    throw error;\n}\nconst signedUrlCache = new Map();\nclass GCSService {\n    /**\n\t * Check if a URL is a blob URL that needs to be replaced\n\t */ static isBlobUrl(url) {\n        return typeof url === \"string\" && (url.startsWith(\"blob:\") || url === \"\" || !url);\n    }\n    /**\n\t * Clear expired entries from the signed URL cache\n\t */ static clearExpiredCache() {\n        const now = Date.now();\n        for (const [key, cached] of signedUrlCache.entries()){\n            if (cached.expiresAt <= now) {\n                signedUrlCache.delete(key);\n            }\n        }\n    }\n    /**\n\t * Check if a file exists in Google Cloud Storage\n\t */ static async fileExists(path) {\n        try {\n            if (!bucket) {\n                return false;\n            }\n            const gcsFile = bucket.file(path);\n            const [exists] = await gcsFile.exists();\n            return exists;\n        } catch (error) {\n            console.error(`Error checking if file exists: ${path}`, error);\n            return false;\n        }\n    }\n    /**\n\t * Upload a file to Google Cloud Storage with enhanced error handling\n\t */ static async uploadFile(file, filename, folder, contentType) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            const gcsPath = `${folder}/${filename}`;\n            const gcsFile = bucket.file(gcsPath);\n            await gcsFile.save(file, {\n                metadata: {\n                    contentType\n                },\n                public: false\n            });\n            // Generate initial signed URL with proper error handling\n            const signedUrl = await this.getSignedUrl(gcsPath, 24 * 60 * 60);\n            return {\n                url: signedUrl,\n                filename,\n                size: file.length,\n                contentType,\n                gcsPath\n            };\n        } catch (error) {\n            console.error(\"Error uploading file to Google Cloud Storage:\", error);\n            throw new Error(\"Failed to upload file to Google Cloud Storage\");\n        }\n    }\n    /**\n\t * Save JSON data to Google Cloud Storage\n\t */ static async saveJSON(data, path) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            const jsonData = JSON.stringify(data, null, 2);\n            const gcsFile = bucket.file(path);\n            await gcsFile.save(jsonData, {\n                metadata: {\n                    contentType: \"application/json\"\n                }\n            });\n            console.log(`JSON data saved to GCS: ${path}`);\n        } catch (error) {\n            console.error(\"Error saving JSON to Google Cloud Storage:\", error);\n            throw new Error(\"Failed to save data to Google Cloud Storage\");\n        }\n    }\n    /**\n\t * Read JSON data from Google Cloud Storage\n\t */ static async readJSON(path) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            const gcsFile = bucket.file(path);\n            const [exists] = await gcsFile.exists();\n            if (!exists) {\n                console.log(`File not found in GCS: ${path}`);\n                return null;\n            }\n            const [contents] = await gcsFile.download();\n            const data = JSON.parse(contents.toString());\n            console.log(`JSON data read from GCS: ${path}`);\n            return data;\n        } catch (error) {\n            console.error(\"Error reading JSON from Google Cloud Storage:\", error);\n            return null;\n        }\n    }\n    /**\n\t * List files in a folder\n\t */ static async listFiles(prefix) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            const [files] = await bucket.getFiles({\n                prefix\n            });\n            const fileNames = files.map((file)=>file.name);\n            console.log(`Listed ${fileNames.length} files from GCS with prefix: ${prefix}`);\n            return fileNames;\n        } catch (error) {\n            console.error(\"Error listing files from Google Cloud Storage:\", error);\n            return [];\n        }\n    }\n    /**\n\t * Delete a file from Google Cloud Storage\n\t */ static async deleteFile(path) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            const gcsFile = bucket.file(path);\n            await gcsFile.delete();\n            console.log(`File deleted from GCS: ${path}`);\n        } catch (error) {\n            console.error(\"Error deleting file from Google Cloud Storage:\", error);\n            throw new Error(\"Failed to delete file from Google Cloud Storage\");\n        }\n    }\n    /**\n\t * Get signed URL for file access with caching\n\t */ static async getSignedUrl(path, expiresIn = 3600) {\n        try {\n            if (!bucket) {\n                throw new Error(\"Google Cloud Storage not initialized\");\n            }\n            // Clean up expired cache entries periodically\n            this.clearExpiredCache();\n            // Check cache first (with 5-minute buffer before expiration)\n            const cacheKey = `${path}:${expiresIn}`;\n            const cached = signedUrlCache.get(cacheKey);\n            const now = Date.now();\n            if (cached && cached.expiresAt > now + 5 * 60 * 1000) {\n                console.log(`Using cached signed URL for GCS file: ${path}`);\n                return cached.url;\n            }\n            // Generate new signed URL\n            const gcsFile = bucket.file(path);\n            const expirationTime = Date.now() + expiresIn * 1000;\n            const [signedUrl] = await gcsFile.getSignedUrl({\n                action: \"read\",\n                expires: expirationTime\n            });\n            // Cache the URL (expires 5 minutes before actual expiration for safety)\n            signedUrlCache.set(cacheKey, {\n                url: signedUrl,\n                expiresAt: expirationTime - 5 * 60 * 1000\n            });\n            console.log(`Generated and cached signed URL for GCS file: ${path}`);\n            return signedUrl;\n        } catch (error) {\n            console.error(\"Error generating signed URL for Google Cloud Storage:\", error);\n            throw new Error(\"Failed to generate signed URL from Google Cloud Storage\");\n        }\n    }\n    /**\n\t * Save artist data in organized folder structure\n\t */ static async saveArtistData(artistData) {\n        const artistId = artistData.id;\n        const eventId = artistData.eventId;\n        try {\n            // Save main profile data\n            await this.saveJSON({\n                id: artistData.id,\n                artistName: artistData.artistName,\n                realName: artistData.realName,\n                email: artistData.email,\n                phone: artistData.phone,\n                style: artistData.style,\n                performanceType: artistData.performanceType,\n                performanceDuration: artistData.performanceDuration,\n                biography: artistData.biography,\n                createdAt: artistData.createdAt,\n                status: artistData.status,\n                eventId: artistData.eventId,\n                eventName: artistData.eventName\n            }, `artists/${artistId}/profile.json`);\n            // Save technical specifications\n            await this.saveJSON({\n                costumeColor: artistData.costumeColor,\n                customCostumeColor: artistData.customCostumeColor,\n                lightColorSingle: artistData.lightColorSingle,\n                lightColorTwo: artistData.lightColorTwo,\n                lightColorThree: artistData.lightColorThree,\n                lightRequests: artistData.lightRequests,\n                stagePositionStart: artistData.stagePositionStart,\n                stagePositionEnd: artistData.stagePositionEnd,\n                customStagePosition: artistData.customStagePosition,\n                equipment: artistData.equipment,\n                specialRequirements: artistData.specialRequirements\n            }, `artists/${artistId}/technical.json`);\n            // Save social media and links\n            await this.saveJSON({\n                socialMedia: artistData.socialMedia,\n                showLink: artistData.showLink\n            }, `artists/${artistId}/social.json`);\n            // Save notes and communications\n            await this.saveJSON({\n                mcNotes: artistData.mcNotes,\n                stageManagerNotes: artistData.stageManagerNotes,\n                notes: artistData.notes\n            }, `artists/${artistId}/notes.json`);\n            // Save music tracks metadata\n            await this.saveJSON({\n                tracks: artistData.musicTracks || []\n            }, `artists/${artistId}/music.json`);\n            // Save gallery metadata\n            await this.saveJSON({\n                files: artistData.galleryFiles || []\n            }, `artists/${artistId}/gallery.json`);\n            // Save event association\n            await this.saveJSON({\n                artistId: artistData.id,\n                artistName: artistData.artistName,\n                eventId: artistData.eventId,\n                eventName: artistData.eventName,\n                status: artistData.status,\n                registrationDate: artistData.createdAt\n            }, `events/${eventId}/artists/${artistId}.json`);\n            console.log(`Artist data saved to storage for artist: ${artistId}`);\n        } catch (error) {\n            console.error(\"Error saving artist data:\", error);\n            throw error;\n        }\n    }\n    /**\n\t * Get complete artist data from storage\n\t */ static async getArtistData(artistId) {\n        try {\n            const [profile, technical, social, notes, music, gallery] = await Promise.all([\n                this.readJSON(`artists/${artistId}/profile.json`),\n                this.readJSON(`artists/${artistId}/technical.json`),\n                this.readJSON(`artists/${artistId}/social.json`),\n                this.readJSON(`artists/${artistId}/notes.json`),\n                this.readJSON(`artists/${artistId}/music.json`),\n                this.readJSON(`artists/${artistId}/gallery.json`)\n            ]);\n            if (!profile) {\n                return null;\n            }\n            // Enrich media with fresh signed URLs\n            const rawTracks = Array.isArray(music?.tracks) ? music.tracks : [];\n            const musicTracks = await Promise.all(rawTracks.map(async (t)=>{\n                const track = {\n                    ...t\n                };\n                const isBlob = this.isBlobUrl(track.file_url);\n                if ((isBlob || !track.file_url) && track.file_path) {\n                    try {\n                        track.file_url = await this.getSignedUrl(track.file_path, 24 * 60 * 60);\n                    } catch (e) {\n                        console.error(\"Failed to sign music track path:\", track.file_path, e);\n                        // Set to null so UI can handle the error\n                        track.file_url = null;\n                    }\n                }\n                return track;\n            }));\n            const rawFiles = Array.isArray(gallery?.files) ? gallery.files : [];\n            const galleryFiles = await Promise.all(rawFiles.map(async (f)=>{\n                const file = {\n                    ...f\n                };\n                const isBlob = this.isBlobUrl(file.file_url);\n                if ((isBlob || !file.file_url) && file.file_path) {\n                    try {\n                        file.file_url = await this.getSignedUrl(file.file_path, 24 * 60 * 60);\n                    } catch (e) {\n                        console.error(\"Failed to sign gallery file path:\", file.file_path, e);\n                        // Set to null so UI can handle the error\n                        file.file_url = null;\n                    }\n                }\n                return file;\n            }));\n            return {\n                ...profile,\n                ...technical,\n                ...social,\n                ...notes,\n                musicTracks,\n                galleryFiles\n            };\n        } catch (error) {\n            console.error(\"Error getting artist data:\", error);\n            return null;\n        }\n    }\n    /**\n\t * Batch fetch multiple artists efficiently\n\t */ static async batchGetArtistData(artistIds) {\n        try {\n            // Batch all file reads for all artists\n            const allFileReads = artistIds.flatMap((artistId)=>[\n                    this.readJSON(`artists/${artistId}/profile.json`),\n                    this.readJSON(`artists/${artistId}/technical.json`),\n                    this.readJSON(`artists/${artistId}/social.json`),\n                    this.readJSON(`artists/${artistId}/notes.json`),\n                    this.readJSON(`artists/${artistId}/music.json`),\n                    this.readJSON(`artists/${artistId}/gallery.json`)\n                ]);\n            // Execute all reads in parallel\n            const allResults = await Promise.all(allFileReads);\n            // Process results for each artist\n            const artists = await Promise.all(artistIds.map(async (artistId, index)=>{\n                const baseIndex = index * 6;\n                const [profile, technical, social, notes, music, gallery] = allResults.slice(baseIndex, baseIndex + 6);\n                if (!profile) {\n                    return null;\n                }\n                // Process media files with lazy loading approach\n                const rawTracks = Array.isArray(music?.tracks) ? music.tracks : [];\n                const rawFiles = Array.isArray(gallery?.files) ? gallery.files : [];\n                // Only generate signed URLs for media that will be immediately visible\n                // For performance, we'll defer URL generation for gallery files\n                const musicTracks = await Promise.all(rawTracks.slice(0, 3).map(async (t)=>{\n                    // Only first 3 tracks\n                    const track = {\n                        ...t\n                    };\n                    if (this.isBlobUrl(track.file_url) && track.file_path) {\n                        try {\n                            track.file_url = await this.getSignedUrl(track.file_path, 24 * 60 * 60);\n                        } catch (e) {\n                            console.error(\"Failed to sign music track path:\", track.file_path, e);\n                            track.file_url = null;\n                        }\n                    }\n                    return track;\n                }));\n                // Add remaining tracks without URLs (lazy loading)\n                const remainingTracks = rawTracks.slice(3).map((t)=>({\n                        ...t,\n                        file_url: t.file_path ? null : t.file_url,\n                        needsUrl: !!t.file_path\n                    }));\n                // For gallery, only process first few images for preview\n                const galleryFiles = rawFiles.slice(0, 6).map((f)=>({\n                        ...f,\n                        url: f.file_path ? null : f.url,\n                        needsUrl: !!f.file_path\n                    }));\n                return {\n                    ...profile,\n                    ...technical,\n                    ...social,\n                    ...notes,\n                    musicTracks: [\n                        ...musicTracks,\n                        ...remainingTracks\n                    ],\n                    galleryFiles,\n                    totalMusicTracks: rawTracks.length,\n                    totalGalleryFiles: rawFiles.length\n                };\n            }));\n            return artists.filter((artist)=>artist !== null);\n        } catch (error) {\n            console.error(\"Error batch getting artist data:\", error);\n            return [];\n        }\n    }\n    /**\n\t * Lazy load media URLs for a specific artist\n\t */ static async loadArtistMediaUrls(artistId, mediaType, startIndex = 0, count = 10) {\n        try {\n            const mediaData = mediaType === \"music\" ? await this.readJSON(`artists/${artistId}/music.json`) : await this.readJSON(`artists/${artistId}/gallery.json`);\n            const items = mediaType === \"music\" ? Array.isArray(mediaData?.tracks) ? mediaData.tracks : [] : Array.isArray(mediaData?.files) ? mediaData.files : [];\n            const selectedItems = items.slice(startIndex, startIndex + count);\n            // Generate signed URLs for the requested items\n            const itemsWithUrls = await Promise.all(selectedItems.map(async (item)=>{\n                const urlField = mediaType === \"music\" ? \"file_url\" : \"url\";\n                const pathField = mediaType === \"music\" ? \"file_path\" : \"file_path\";\n                if (this.isBlobUrl(item[urlField]) && item[pathField]) {\n                    try {\n                        item[urlField] = await this.getSignedUrl(item[pathField], 24 * 60 * 60);\n                    } catch (e) {\n                        console.error(`Failed to sign ${mediaType} path:`, item[pathField], e);\n                        item[urlField] = null;\n                    }\n                }\n                return item;\n            }));\n            return itemsWithUrls;\n        } catch (error) {\n            console.error(`Error loading ${mediaType} URLs for artist ${artistId}:`, error);\n            return [];\n        }\n    }\n    /**\n\t * Get all artists for an event (simplified for demo)\n\t */ static async getEventArtists(eventId) {\n        try {\n            // For demo purposes, we'll return a sample artist if no real data exists\n            const sampleArtist = {\n                id: \"artist_1755011489205_xswjcvfdv\",\n                artistName: \"Water Festival Stage\",\n                realName: \"John Wick (Htoo Aung Wai)\",\n                email: \"john@gmail.com\",\n                phone: \"052 211 6024\",\n                style: \"Death Metal\",\n                performanceType: \"other\",\n                performanceDuration: 5,\n                biography: \"I like Death Metal.\",\n                costumeColor: \"red\",\n                lightColorSingle: \"blue\",\n                lightColorTwo: \"magenta\",\n                lightColorThree: \"amber\",\n                stagePositionStart: \"downstage-left\",\n                stagePositionEnd: \"left\",\n                socialMedia: {\n                    instagram: \"https://www.officeolympics.io\",\n                    facebook: \"https://www.officeolympics.io\",\n                    youtube: \"https://www.officeolympics.io\",\n                    tiktok: \"https://www.officeolympics.io\",\n                    website: \"https://www.officeolympics.io\"\n                },\n                eventId,\n                eventName: \"EDM Festival\",\n                status: \"pending\",\n                createdAt: \"2025-08-12T15:11:29.205Z\",\n                musicTracks: [\n                    {\n                        song_title: \"Metal\",\n                        duration: 2,\n                        notes: \"No one\",\n                        is_main_track: true,\n                        tempo: \"medium\"\n                    }\n                ],\n                galleryFiles: []\n            };\n            return [\n                sampleArtist\n            ];\n        } catch (error) {\n            console.error(\"Error getting event artists:\", error);\n            return [];\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GCSService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-cloud-storage.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@google-cloud","vendor-chunks/google-auth-library","vendor-chunks/tr46","vendor-chunks/readable-stream","vendor-chunks/bignumber.js","vendor-chunks/fast-xml-parser","vendor-chunks/semver","vendor-chunks/gaxios","vendor-chunks/teeny-request","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/mime","vendor-chunks/jsonwebtoken","vendor-chunks/html-entities","vendor-chunks/json-bigint","vendor-chunks/event-target-shim","vendor-chunks/google-logging-utils","vendor-chunks/gcp-metadata","vendor-chunks/lodash.includes","vendor-chunks/debug","vendor-chunks/http-proxy-agent","vendor-chunks/https-proxy-agent","vendor-chunks/gtoken","vendor-chunks/agent-base","vendor-chunks/string_decoder","vendor-chunks/retry-request","vendor-chunks/jws","vendor-chunks/lodash.once","vendor-chunks/jwa","vendor-chunks/retry","vendor-chunks/lodash.isinteger","vendor-chunks/duplexify","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/webidl-conversions","vendor-chunks/strnum","vendor-chunks/base64-js","vendor-chunks/lodash.isplainobject","vendor-chunks/abort-controller","vendor-chunks/extend","vendor-chunks/ms","vendor-chunks/end-of-stream","vendor-chunks/lodash.isstring","vendor-chunks/lodash.isnumber","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/p-limit","vendor-chunks/async-retry","vendor-chunks/buffer-equal-constant-time","vendor-chunks/inherits","vendor-chunks/yocto-queue","vendor-chunks/once","vendor-chunks/wrappy","vendor-chunks/@tootallnate","vendor-chunks/stubs","vendor-chunks/is-stream","vendor-chunks/stream-shift","vendor-chunks/stream-events","vendor-chunks/arrify","vendor-chunks/util-deprecate"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fme%2Froute&page=%2Fapi%2Fauth%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cfame-event-manager%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cfame-event-manager&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();